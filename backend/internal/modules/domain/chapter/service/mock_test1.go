// Code generated by MockGen. DO NOT EDIT.
// Source: waterfall-backend/internal/modules/domain/chapter/service (interfaces: IChapterRepo)

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"
	dto "waterfall-backend/internal/modules/domain/chapter/dto"
	transaction "waterfall-backend/internal/pkg/transaction"

	gomock "github.com/golang/mock/gomock"
)

// MockIChapterRepo is a mock of IChapterRepo interface.
type MockIChapterRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIChapterRepoMockRecorder
}

// MockIChapterRepoMockRecorder is the mock recorder for MockIChapterRepo.
type MockIChapterRepoMockRecorder struct {
	mock *MockIChapterRepo
}

// NewMockIChapterRepo creates a new mock instance.
func NewMockIChapterRepo(ctrl *gomock.Controller) *MockIChapterRepo {
	mock := &MockIChapterRepo{ctrl: ctrl}
	mock.recorder = &MockIChapterRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIChapterRepo) EXPECT() *MockIChapterRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIChapterRepo) Create(arg0 context.Context, arg1 *dto.ChapterCreate) (*dto.Chapter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*dto.Chapter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIChapterRepoMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIChapterRepo)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockIChapterRepo) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIChapterRepoMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIChapterRepo)(nil).Delete), arg0, arg1)
}

// FirstUuid mocks base method.
func (m *MockIChapterRepo) FirstUuid(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FirstUuid", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FirstUuid indicates an expected call of FirstUuid.
func (mr *MockIChapterRepoMockRecorder) FirstUuid(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirstUuid", reflect.TypeOf((*MockIChapterRepo)(nil).FirstUuid), arg0)
}

// GetByUuid mocks base method.
func (m *MockIChapterRepo) GetByUuid(arg0 context.Context, arg1 string) (*dto.Chapter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUuid", arg0, arg1)
	ret0, _ := ret[0].(*dto.Chapter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUuid indicates an expected call of GetByUuid.
func (mr *MockIChapterRepoMockRecorder) GetByUuid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUuid", reflect.TypeOf((*MockIChapterRepo)(nil).GetByUuid), arg0, arg1)
}

// LastAvailableUuid mocks base method.
func (m *MockIChapterRepo) LastAvailableUuid(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastAvailableUuid", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastAvailableUuid indicates an expected call of LastAvailableUuid.
func (mr *MockIChapterRepoMockRecorder) LastAvailableUuid(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastAvailableUuid", reflect.TypeOf((*MockIChapterRepo)(nil).LastAvailableUuid), arg0)
}

// List mocks base method.
func (m *MockIChapterRepo) List(arg0 context.Context) (dto.Chapters, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].(dto.Chapters)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIChapterRepoMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIChapterRepo)(nil).List), arg0)
}

// NextUuid mocks base method.
func (m *MockIChapterRepo) NextUuid(arg0 context.Context, arg1 string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextUuid", arg0, arg1)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NextUuid indicates an expected call of NextUuid.
func (mr *MockIChapterRepoMockRecorder) NextUuid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextUuid", reflect.TypeOf((*MockIChapterRepo)(nil).NextUuid), arg0, arg1)
}

// PrevUuid mocks base method.
func (m *MockIChapterRepo) PrevUuid(arg0 context.Context, arg1 string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrevUuid", arg0, arg1)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrevUuid indicates an expected call of PrevUuid.
func (mr *MockIChapterRepoMockRecorder) PrevUuid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrevUuid", reflect.TypeOf((*MockIChapterRepo)(nil).PrevUuid), arg0, arg1)
}

// Tx mocks base method.
func (m *MockIChapterRepo) Tx(arg0 context.Context) (transaction.TxRepo, transaction.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tx", arg0)
	ret0, _ := ret[0].(transaction.TxRepo)
	ret1, _ := ret[1].(transaction.Tx)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Tx indicates an expected call of Tx.
func (mr *MockIChapterRepoMockRecorder) Tx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tx", reflect.TypeOf((*MockIChapterRepo)(nil).Tx), arg0)
}

// Update mocks base method.
func (m *MockIChapterRepo) Update(arg0 context.Context, arg1 string, arg2 *dto.ChapterUpdate) (*dto.Chapter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*dto.Chapter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockIChapterRepoMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIChapterRepo)(nil).Update), arg0, arg1, arg2)
}
