package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"waterfall-backend/internal/constants/err_const"
	"waterfall-backend/internal/models"
	"waterfall-backend/internal/models/roles"
	"waterfall-backend/internal/models/session"
	"waterfall-backend/internal/modules/domain/user/dto"
	"waterfall-backend/internal/modules/io/graphql/generated"
	dto1 "waterfall-backend/internal/modules/services/fs/dto"
)

// UserUpdateSelf is the resolver for the UserUpdateSelf field.
func (r *mutationResolver) UserUpdateSelf(ctx context.Context, updateUser dto.UserUpdate) (*dto.User, error) {
	ss, ok := session.GetFromCtx(ctx)
	if !ok {
		return nil, err_const.ErrMissingSession
	}

	return r.services.User.Update(ctx, ss.UserUuid, &updateUser)
}

// UserUpdate is the resolver for the UserUpdate field.
func (r *mutationResolver) UserUpdate(ctx context.Context, id string, updateUser dto.UserUpdate) (*dto.User, error) {
	return r.services.User.Update(ctx, id, &updateUser)
}

// UserDeleteSelf is the resolver for the UserDeleteSelf field.
func (r *mutationResolver) UserDeleteSelf(ctx context.Context) (string, error) {
	ss, ok := session.GetFromCtx(ctx)
	if !ok {
		return "", err_const.ErrMissingSession
	}

	err := r.services.User.Delete(ctx, ss.UserUuid)
	if err != nil {
		return "", err
	}

	return ss.UserUuid, nil
}

// UserDelete is the resolver for the UserDelete field.
func (r *mutationResolver) UserDelete(ctx context.Context, id string) (string, error) {
	err := r.services.User.Delete(ctx, id)
	if err != nil {
		return "", err
	}

	return id, nil
}

// UserAddRole is the resolver for the UserAddRole field.
func (r *mutationResolver) UserAddRole(ctx context.Context, id string, role roles.Type) ([]*dto.Role, error) {
	return r.services.User.AddRole(ctx, id, role)
}

// UserRemoveRole is the resolver for the UserRemoveRole field.
func (r *mutationResolver) UserRemoveRole(ctx context.Context, id string, role roles.Type) ([]*dto.Role, error) {
	return r.services.User.RemoveRole(ctx, id, role)
}

// UserGet is the resolver for the UserGet field.
func (r *queryResolver) UserGet(ctx context.Context, id string) (*dto.User, error) {
	return r.services.User.GetByUuid(ctx, id)
}

// UserGetSelf is the resolver for the UserGetSelf field.
func (r *queryResolver) UserGetSelf(ctx context.Context) (*dto.User, error) {
	ss, ok := session.GetFromCtx(ctx)
	if !ok {
		return nil, err_const.ErrMissingSession
	}

	return r.services.User.GetByUuid(ctx, ss.UserUuid)
}

// UserList is the resolver for the UserList field.
func (r *queryResolver) UserList(ctx context.Context) ([]*dto.User, error) {
	return r.services.User.List(ctx)
}

// Roles is the resolver for the Roles field.
func (r *userResolver) Roles(ctx context.Context, obj *dto.User) ([]*dto.Role, error) {
	return r.services.User.GetRolesByUuid(ctx, obj.Uuid)
}

// Attachments is the resolver for the Attachments field.
func (r *userResolver) Attachments(ctx context.Context, obj *dto.User) ([]*dto1.File, error) {
	return r.services.FileStorage.ListNotTempByObjectRef(ctx, &models.ObjectRef{
		Type: models.ObjectTypeUsers,
		Ref:  obj.Uuid,
	})
}

// Fullname is the resolver for the Fullname field.
func (r *userUpdateResolver) Fullname(ctx context.Context, obj *dto.UserUpdate, data string) error {
	obj.Fullname.Set(&data)
	return nil
}

// Username is the resolver for the Username field.
func (r *userUpdateResolver) Username(ctx context.Context, obj *dto.UserUpdate, data string) error {
	obj.Username.Set(&data)
	return nil
}

// User returns generated.UserResolver implementation.
func (r *Resolver) User() generated.UserResolver { return &userResolver{r} }

// UserUpdate returns generated.UserUpdateResolver implementation.
func (r *Resolver) UserUpdate() generated.UserUpdateResolver { return &userUpdateResolver{r} }

type userResolver struct{ *Resolver }
type userUpdateResolver struct{ *Resolver }
