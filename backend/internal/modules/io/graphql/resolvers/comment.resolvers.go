package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"waterfall-backend/internal/modules/domain/comment/dto"
	dto1 "waterfall-backend/internal/modules/domain/user/dto"
	"waterfall-backend/internal/modules/io/graphql/generated"
)

// Author is the resolver for the Author field.
func (r *commentResolver) Author(ctx context.Context, obj *dto.Comment) (*dto1.User, error) {
	author, err := r.services.User.GetByUuid(ctx, obj.AuthorUuid)
	if err != nil {
		return nil, fmt.Errorf("не удалось получить автора: %w", err)
	}

	return author, nil
}

// CommentCreate is the resolver for the CommentCreate field.
func (r *mutationResolver) CommentCreate(ctx context.Context, chapter dto.CommentCreate) (*dto.Comment, error) {
	return r.services.Comment.Create(ctx, &chapter)
}

// CommentUpdate is the resolver for the CommentUpdate field.
func (r *mutationResolver) CommentUpdate(ctx context.Context, id string, chapter dto.CommentUpdate) (*dto.Comment, error) {
	return r.services.Comment.Update(ctx, id, &chapter)
}

// CommentDelete is the resolver for the CommentDelete field.
func (r *mutationResolver) CommentDelete(ctx context.Context, id string) (string, error) {
	err := r.services.Comment.Delete(ctx, id)
	if err != nil {
		return "", err
	}

	return id, nil
}

// CommentGet is the resolver for the CommentGet field.
func (r *queryResolver) CommentGet(ctx context.Context, id string) (*dto.Comment, error) {
	return r.services.Comment.GetByUuid(ctx, id)
}

// CommentListByChapter is the resolver for the CommentListByChapter field.
func (r *queryResolver) CommentListByChapter(ctx context.Context, chapterID string) ([]*dto.Comment, error) {
	return r.services.Comment.ListByChapter(ctx, chapterID)
}

// Comment returns generated.CommentResolver implementation.
func (r *Resolver) Comment() generated.CommentResolver { return &commentResolver{r} }

type commentResolver struct{ *Resolver }
