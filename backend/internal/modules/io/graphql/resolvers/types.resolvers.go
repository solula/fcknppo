package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"waterfall-backend/internal/modules/io/graphql/generated"
	"waterfall-backend/internal/pkg/optional"
)

// Ping is the resolver for the ping field.
func (r *mutationResolver) Ping(ctx context.Context) (string, error) {
	return "pong", nil
}

// Ping is the resolver for the ping field.
func (r *queryResolver) Ping(ctx context.Context) (string, error) {
	return "pong", nil
}

// Value is the resolver for the value field.
func (r *optionalIDResolver) Value(ctx context.Context, obj *optional.Variable[string], data *string) error {
	obj.Set(data)
	return nil
}

// Value is the resolver for the value field.
func (r *optionalIntResolver) Value(ctx context.Context, obj *optional.Variable[int], data *int) error {
	obj.Set(data)
	return nil
}

// Value is the resolver for the value field.
func (r *optionalStringResolver) Value(ctx context.Context, obj *optional.Variable[string], data *string) error {
	obj.Set(data)
	return nil
}

// Value is the resolver for the value field.
func (r *optionalStringSliceResolver) Value(ctx context.Context, obj *optional.Variable[[]string], data []string) error {
	obj.Set(&data)
	return nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// OptionalID returns generated.OptionalIDResolver implementation.
func (r *Resolver) OptionalID() generated.OptionalIDResolver { return &optionalIDResolver{r} }

// OptionalInt returns generated.OptionalIntResolver implementation.
func (r *Resolver) OptionalInt() generated.OptionalIntResolver { return &optionalIntResolver{r} }

// OptionalString returns generated.OptionalStringResolver implementation.
func (r *Resolver) OptionalString() generated.OptionalStringResolver {
	return &optionalStringResolver{r}
}

// OptionalStringSlice returns generated.OptionalStringSliceResolver implementation.
func (r *Resolver) OptionalStringSlice() generated.OptionalStringSliceResolver {
	return &optionalStringSliceResolver{r}
}

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type optionalIDResolver struct{ *Resolver }
type optionalIntResolver struct{ *Resolver }
type optionalStringResolver struct{ *Resolver }
type optionalStringSliceResolver struct{ *Resolver }
