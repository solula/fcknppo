// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"
	"waterfall-backend/internal/modules/stores/db/ent/chapter"
	"waterfall-backend/internal/modules/stores/db/ent/chaptertext"
	"waterfall-backend/internal/modules/stores/db/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ChapterTextQuery is the builder for querying ChapterText entities.
type ChapterTextQuery struct {
	config
	ctx         *QueryContext
	order       []chaptertext.Order
	inters      []Interceptor
	predicates  []predicate.ChapterText
	withChapter *ChapterQuery
	modifiers   []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ChapterTextQuery builder.
func (ctq *ChapterTextQuery) Where(ps ...predicate.ChapterText) *ChapterTextQuery {
	ctq.predicates = append(ctq.predicates, ps...)
	return ctq
}

// Limit the number of records to be returned by this query.
func (ctq *ChapterTextQuery) Limit(limit int) *ChapterTextQuery {
	ctq.ctx.Limit = &limit
	return ctq
}

// Offset to start from.
func (ctq *ChapterTextQuery) Offset(offset int) *ChapterTextQuery {
	ctq.ctx.Offset = &offset
	return ctq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ctq *ChapterTextQuery) Unique(unique bool) *ChapterTextQuery {
	ctq.ctx.Unique = &unique
	return ctq
}

// Order specifies how the records should be ordered.
func (ctq *ChapterTextQuery) Order(o ...chaptertext.Order) *ChapterTextQuery {
	ctq.order = append(ctq.order, o...)
	return ctq
}

// QueryChapter chains the current query on the "chapter" edge.
func (ctq *ChapterTextQuery) QueryChapter() *ChapterQuery {
	query := (&ChapterClient{config: ctq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ctq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ctq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(chaptertext.Table, chaptertext.FieldID, selector),
			sqlgraph.To(chapter.Table, chapter.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, chaptertext.ChapterTable, chaptertext.ChapterColumn),
		)
		fromU = sqlgraph.SetNeighbors(ctq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ChapterText entity from the query.
// Returns a *NotFoundError when no ChapterText was found.
func (ctq *ChapterTextQuery) First(ctx context.Context) (*ChapterText, error) {
	nodes, err := ctq.Limit(1).All(setContextOp(ctx, ctq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{chaptertext.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ctq *ChapterTextQuery) FirstX(ctx context.Context) *ChapterText {
	node, err := ctq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ChapterText ID from the query.
// Returns a *NotFoundError when no ChapterText ID was found.
func (ctq *ChapterTextQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = ctq.Limit(1).IDs(setContextOp(ctx, ctq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{chaptertext.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ctq *ChapterTextQuery) FirstIDX(ctx context.Context) string {
	id, err := ctq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ChapterText entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ChapterText entity is found.
// Returns a *NotFoundError when no ChapterText entities are found.
func (ctq *ChapterTextQuery) Only(ctx context.Context) (*ChapterText, error) {
	nodes, err := ctq.Limit(2).All(setContextOp(ctx, ctq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{chaptertext.Label}
	default:
		return nil, &NotSingularError{chaptertext.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ctq *ChapterTextQuery) OnlyX(ctx context.Context) *ChapterText {
	node, err := ctq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ChapterText ID in the query.
// Returns a *NotSingularError when more than one ChapterText ID is found.
// Returns a *NotFoundError when no entities are found.
func (ctq *ChapterTextQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = ctq.Limit(2).IDs(setContextOp(ctx, ctq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{chaptertext.Label}
	default:
		err = &NotSingularError{chaptertext.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ctq *ChapterTextQuery) OnlyIDX(ctx context.Context) string {
	id, err := ctq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ChapterTexts.
func (ctq *ChapterTextQuery) All(ctx context.Context) ([]*ChapterText, error) {
	ctx = setContextOp(ctx, ctq.ctx, "All")
	if err := ctq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ChapterText, *ChapterTextQuery]()
	return withInterceptors[[]*ChapterText](ctx, ctq, qr, ctq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ctq *ChapterTextQuery) AllX(ctx context.Context) []*ChapterText {
	nodes, err := ctq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ChapterText IDs.
func (ctq *ChapterTextQuery) IDs(ctx context.Context) (ids []string, err error) {
	if ctq.ctx.Unique == nil && ctq.path != nil {
		ctq.Unique(true)
	}
	ctx = setContextOp(ctx, ctq.ctx, "IDs")
	if err = ctq.Select(chaptertext.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ctq *ChapterTextQuery) IDsX(ctx context.Context) []string {
	ids, err := ctq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ctq *ChapterTextQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ctq.ctx, "Count")
	if err := ctq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ctq, querierCount[*ChapterTextQuery](), ctq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ctq *ChapterTextQuery) CountX(ctx context.Context) int {
	count, err := ctq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ctq *ChapterTextQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ctq.ctx, "Exist")
	switch _, err := ctq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ctq *ChapterTextQuery) ExistX(ctx context.Context) bool {
	exist, err := ctq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ChapterTextQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ctq *ChapterTextQuery) Clone() *ChapterTextQuery {
	if ctq == nil {
		return nil
	}
	return &ChapterTextQuery{
		config:      ctq.config,
		ctx:         ctq.ctx.Clone(),
		order:       append([]chaptertext.Order{}, ctq.order...),
		inters:      append([]Interceptor{}, ctq.inters...),
		predicates:  append([]predicate.ChapterText{}, ctq.predicates...),
		withChapter: ctq.withChapter.Clone(),
		// clone intermediate query.
		sql:  ctq.sql.Clone(),
		path: ctq.path,
	}
}

// WithChapter tells the query-builder to eager-load the nodes that are connected to
// the "chapter" edge. The optional arguments are used to configure the query builder of the edge.
func (ctq *ChapterTextQuery) WithChapter(opts ...func(*ChapterQuery)) *ChapterTextQuery {
	query := (&ChapterClient{config: ctq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ctq.withChapter = query
	return ctq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ChapterText.Query().
//		GroupBy(chaptertext.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ctq *ChapterTextQuery) GroupBy(field string, fields ...string) *ChapterTextGroupBy {
	ctq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ChapterTextGroupBy{build: ctq}
	grbuild.flds = &ctq.ctx.Fields
	grbuild.label = chaptertext.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.ChapterText.Query().
//		Select(chaptertext.FieldCreatedAt).
//		Scan(ctx, &v)
func (ctq *ChapterTextQuery) Select(fields ...string) *ChapterTextSelect {
	ctq.ctx.Fields = append(ctq.ctx.Fields, fields...)
	sbuild := &ChapterTextSelect{ChapterTextQuery: ctq}
	sbuild.label = chaptertext.Label
	sbuild.flds, sbuild.scan = &ctq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ChapterTextSelect configured with the given aggregations.
func (ctq *ChapterTextQuery) Aggregate(fns ...AggregateFunc) *ChapterTextSelect {
	return ctq.Select().Aggregate(fns...)
}

func (ctq *ChapterTextQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ctq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ctq); err != nil {
				return err
			}
		}
	}
	for _, f := range ctq.ctx.Fields {
		if !chaptertext.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ctq.path != nil {
		prev, err := ctq.path(ctx)
		if err != nil {
			return err
		}
		ctq.sql = prev
	}
	if chaptertext.Policy == nil {
		return errors.New("ent: uninitialized chaptertext.Policy (forgotten import ent/runtime?)")
	}
	if err := chaptertext.Policy.EvalQuery(ctx, ctq); err != nil {
		return err
	}
	return nil
}

func (ctq *ChapterTextQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ChapterText, error) {
	var (
		nodes       = []*ChapterText{}
		_spec       = ctq.querySpec()
		loadedTypes = [1]bool{
			ctq.withChapter != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ChapterText).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ChapterText{config: ctq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(ctq.modifiers) > 0 {
		_spec.Modifiers = ctq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ctq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ctq.withChapter; query != nil {
		if err := ctq.loadChapter(ctx, query, nodes, nil,
			func(n *ChapterText, e *Chapter) { n.Edges.Chapter = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ctq *ChapterTextQuery) loadChapter(ctx context.Context, query *ChapterQuery, nodes []*ChapterText, init func(*ChapterText), assign func(*ChapterText, *Chapter)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*ChapterText)
	for i := range nodes {
		fk := nodes[i].ChapterUUID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(chapter.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "chapter_uuid" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ctq *ChapterTextQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ctq.querySpec()
	if len(ctq.modifiers) > 0 {
		_spec.Modifiers = ctq.modifiers
	}
	_spec.Node.Columns = ctq.ctx.Fields
	if len(ctq.ctx.Fields) > 0 {
		_spec.Unique = ctq.ctx.Unique != nil && *ctq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ctq.driver, _spec)
}

func (ctq *ChapterTextQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(chaptertext.Table, chaptertext.Columns, sqlgraph.NewFieldSpec(chaptertext.FieldID, field.TypeString))
	_spec.From = ctq.sql
	if unique := ctq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ctq.path != nil {
		_spec.Unique = true
	}
	if fields := ctq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, chaptertext.FieldID)
		for i := range fields {
			if fields[i] != chaptertext.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if ctq.withChapter != nil {
			_spec.Node.AddColumnOnce(chaptertext.FieldChapterUUID)
		}
	}
	if ps := ctq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ctq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ctq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ctq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ctq *ChapterTextQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ctq.driver.Dialect())
	t1 := builder.Table(chaptertext.Table)
	columns := ctq.ctx.Fields
	if len(columns) == 0 {
		columns = chaptertext.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ctq.sql != nil {
		selector = ctq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ctq.ctx.Unique != nil && *ctq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range ctq.modifiers {
		m(selector)
	}
	for _, p := range ctq.predicates {
		p(selector)
	}
	for _, p := range ctq.order {
		p(selector)
	}
	if offset := ctq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ctq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ctq *ChapterTextQuery) Modify(modifiers ...func(s *sql.Selector)) *ChapterTextSelect {
	ctq.modifiers = append(ctq.modifiers, modifiers...)
	return ctq.Select()
}

// ChapterTextGroupBy is the group-by builder for ChapterText entities.
type ChapterTextGroupBy struct {
	selector
	build *ChapterTextQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ctgb *ChapterTextGroupBy) Aggregate(fns ...AggregateFunc) *ChapterTextGroupBy {
	ctgb.fns = append(ctgb.fns, fns...)
	return ctgb
}

// Scan applies the selector query and scans the result into the given value.
func (ctgb *ChapterTextGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ctgb.build.ctx, "GroupBy")
	if err := ctgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ChapterTextQuery, *ChapterTextGroupBy](ctx, ctgb.build, ctgb, ctgb.build.inters, v)
}

func (ctgb *ChapterTextGroupBy) sqlScan(ctx context.Context, root *ChapterTextQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ctgb.fns))
	for _, fn := range ctgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ctgb.flds)+len(ctgb.fns))
		for _, f := range *ctgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ctgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ctgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ChapterTextSelect is the builder for selecting fields of ChapterText entities.
type ChapterTextSelect struct {
	*ChapterTextQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cts *ChapterTextSelect) Aggregate(fns ...AggregateFunc) *ChapterTextSelect {
	cts.fns = append(cts.fns, fns...)
	return cts
}

// Scan applies the selector query and scans the result into the given value.
func (cts *ChapterTextSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cts.ctx, "Select")
	if err := cts.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ChapterTextQuery, *ChapterTextSelect](ctx, cts.ChapterTextQuery, cts, cts.inters, v)
}

func (cts *ChapterTextSelect) sqlScan(ctx context.Context, root *ChapterTextQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(cts.fns))
	for _, fn := range cts.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*cts.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (cts *ChapterTextSelect) Modify(modifiers ...func(s *sql.Selector)) *ChapterTextSelect {
	cts.modifiers = append(cts.modifiers, modifiers...)
	return cts
}
