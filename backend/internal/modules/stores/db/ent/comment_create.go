// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"waterfall-backend/internal/modules/stores/db/ent/chapter"
	"waterfall-backend/internal/modules/stores/db/ent/comment"
	"waterfall-backend/internal/modules/stores/db/ent/user"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CommentCreate is the builder for creating a Comment entity.
type CommentCreate struct {
	config
	mutation *CommentMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (cc *CommentCreate) SetCreatedAt(t time.Time) *CommentCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *CommentCreate) SetNillableCreatedAt(t *time.Time) *CommentCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *CommentCreate) SetUpdatedAt(t time.Time) *CommentCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *CommentCreate) SetNillableUpdatedAt(t *time.Time) *CommentCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetDeletedAt sets the "deleted_at" field.
func (cc *CommentCreate) SetDeletedAt(t time.Time) *CommentCreate {
	cc.mutation.SetDeletedAt(t)
	return cc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cc *CommentCreate) SetNillableDeletedAt(t *time.Time) *CommentCreate {
	if t != nil {
		cc.SetDeletedAt(*t)
	}
	return cc
}

// SetText sets the "text" field.
func (cc *CommentCreate) SetText(s string) *CommentCreate {
	cc.mutation.SetText(s)
	return cc
}

// SetAuthorUUID sets the "author_uuid" field.
func (cc *CommentCreate) SetAuthorUUID(s string) *CommentCreate {
	cc.mutation.SetAuthorUUID(s)
	return cc
}

// SetParentUUID sets the "parent_uuid" field.
func (cc *CommentCreate) SetParentUUID(s string) *CommentCreate {
	cc.mutation.SetParentUUID(s)
	return cc
}

// SetNillableParentUUID sets the "parent_uuid" field if the given value is not nil.
func (cc *CommentCreate) SetNillableParentUUID(s *string) *CommentCreate {
	if s != nil {
		cc.SetParentUUID(*s)
	}
	return cc
}

// SetChapterUUID sets the "chapter_uuid" field.
func (cc *CommentCreate) SetChapterUUID(s string) *CommentCreate {
	cc.mutation.SetChapterUUID(s)
	return cc
}

// SetNillableChapterUUID sets the "chapter_uuid" field if the given value is not nil.
func (cc *CommentCreate) SetNillableChapterUUID(s *string) *CommentCreate {
	if s != nil {
		cc.SetChapterUUID(*s)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *CommentCreate) SetID(s string) *CommentCreate {
	cc.mutation.SetID(s)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *CommentCreate) SetNillableID(s *string) *CommentCreate {
	if s != nil {
		cc.SetID(*s)
	}
	return cc
}

// SetAuthorID sets the "author" edge to the User entity by ID.
func (cc *CommentCreate) SetAuthorID(id string) *CommentCreate {
	cc.mutation.SetAuthorID(id)
	return cc
}

// SetAuthor sets the "author" edge to the User entity.
func (cc *CommentCreate) SetAuthor(u *User) *CommentCreate {
	return cc.SetAuthorID(u.ID)
}

// SetParentID sets the "parent" edge to the Comment entity by ID.
func (cc *CommentCreate) SetParentID(id string) *CommentCreate {
	cc.mutation.SetParentID(id)
	return cc
}

// SetNillableParentID sets the "parent" edge to the Comment entity by ID if the given value is not nil.
func (cc *CommentCreate) SetNillableParentID(id *string) *CommentCreate {
	if id != nil {
		cc = cc.SetParentID(*id)
	}
	return cc
}

// SetParent sets the "parent" edge to the Comment entity.
func (cc *CommentCreate) SetParent(c *Comment) *CommentCreate {
	return cc.SetParentID(c.ID)
}

// AddChildIDs adds the "children" edge to the Comment entity by IDs.
func (cc *CommentCreate) AddChildIDs(ids ...string) *CommentCreate {
	cc.mutation.AddChildIDs(ids...)
	return cc
}

// AddChildren adds the "children" edges to the Comment entity.
func (cc *CommentCreate) AddChildren(c ...*Comment) *CommentCreate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddChildIDs(ids...)
}

// SetChapterID sets the "chapter" edge to the Chapter entity by ID.
func (cc *CommentCreate) SetChapterID(id string) *CommentCreate {
	cc.mutation.SetChapterID(id)
	return cc
}

// SetNillableChapterID sets the "chapter" edge to the Chapter entity by ID if the given value is not nil.
func (cc *CommentCreate) SetNillableChapterID(id *string) *CommentCreate {
	if id != nil {
		cc = cc.SetChapterID(*id)
	}
	return cc
}

// SetChapter sets the "chapter" edge to the Chapter entity.
func (cc *CommentCreate) SetChapter(c *Chapter) *CommentCreate {
	return cc.SetChapterID(c.ID)
}

// Mutation returns the CommentMutation object of the builder.
func (cc *CommentCreate) Mutation() *CommentMutation {
	return cc.mutation
}

// Save creates the Comment in the database.
func (cc *CommentCreate) Save(ctx context.Context) (*Comment, error) {
	if err := cc.defaults(); err != nil {
		return nil, err
	}
	return withHooks[*Comment, CommentMutation](ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CommentCreate) SaveX(ctx context.Context) *Comment {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CommentCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CommentCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CommentCreate) defaults() error {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		if comment.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized comment.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := comment.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		if comment.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized comment.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := comment.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cc.mutation.ID(); !ok {
		if comment.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized comment.DefaultID (forgotten import ent/runtime?)")
		}
		v := comment.DefaultID()
		cc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cc *CommentCreate) check() error {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Comment.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Comment.updated_at"`)}
	}
	if _, ok := cc.mutation.Text(); !ok {
		return &ValidationError{Name: "text", err: errors.New(`ent: missing required field "Comment.text"`)}
	}
	if v, ok := cc.mutation.Text(); ok {
		if err := comment.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf(`ent: validator failed for field "Comment.text": %w`, err)}
		}
	}
	if _, ok := cc.mutation.AuthorUUID(); !ok {
		return &ValidationError{Name: "author_uuid", err: errors.New(`ent: missing required field "Comment.author_uuid"`)}
	}
	if _, ok := cc.mutation.AuthorID(); !ok {
		return &ValidationError{Name: "author", err: errors.New(`ent: missing required edge "Comment.author"`)}
	}
	return nil
}

func (cc *CommentCreate) sqlSave(ctx context.Context) (*Comment, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Comment.ID type: %T", _spec.ID.Value)
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CommentCreate) createSpec() (*Comment, *sqlgraph.CreateSpec) {
	var (
		_node = &Comment{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(comment.Table, sqlgraph.NewFieldSpec(comment.FieldID, field.TypeString))
	)
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(comment.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(comment.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.DeletedAt(); ok {
		_spec.SetField(comment.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := cc.mutation.Text(); ok {
		_spec.SetField(comment.FieldText, field.TypeString, value)
		_node.Text = value
	}
	if nodes := cc.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.AuthorTable,
			Columns: []string{comment.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AuthorUUID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.ParentTable,
			Columns: []string{comment.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentUUID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.ChildrenTable,
			Columns: []string{comment.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ChapterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.ChapterTable,
			Columns: []string{comment.ChapterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chapter.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ChapterUUID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Comment.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CommentUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (cc *CommentCreate) OnConflict(opts ...sql.ConflictOption) *CommentUpsertOne {
	cc.conflict = opts
	return &CommentUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Comment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *CommentCreate) OnConflictColumns(columns ...string) *CommentUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &CommentUpsertOne{
		create: cc,
	}
}

type (
	// CommentUpsertOne is the builder for "upsert"-ing
	//  one Comment node.
	CommentUpsertOne struct {
		create *CommentCreate
	}

	// CommentUpsert is the "OnConflict" setter.
	CommentUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *CommentUpsert) SetUpdatedAt(v time.Time) *CommentUpsert {
	u.Set(comment.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CommentUpsert) UpdateUpdatedAt() *CommentUpsert {
	u.SetExcluded(comment.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CommentUpsert) SetDeletedAt(v time.Time) *CommentUpsert {
	u.Set(comment.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CommentUpsert) UpdateDeletedAt() *CommentUpsert {
	u.SetExcluded(comment.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *CommentUpsert) ClearDeletedAt() *CommentUpsert {
	u.SetNull(comment.FieldDeletedAt)
	return u
}

// SetText sets the "text" field.
func (u *CommentUpsert) SetText(v string) *CommentUpsert {
	u.Set(comment.FieldText, v)
	return u
}

// UpdateText sets the "text" field to the value that was provided on create.
func (u *CommentUpsert) UpdateText() *CommentUpsert {
	u.SetExcluded(comment.FieldText)
	return u
}

// SetAuthorUUID sets the "author_uuid" field.
func (u *CommentUpsert) SetAuthorUUID(v string) *CommentUpsert {
	u.Set(comment.FieldAuthorUUID, v)
	return u
}

// UpdateAuthorUUID sets the "author_uuid" field to the value that was provided on create.
func (u *CommentUpsert) UpdateAuthorUUID() *CommentUpsert {
	u.SetExcluded(comment.FieldAuthorUUID)
	return u
}

// SetParentUUID sets the "parent_uuid" field.
func (u *CommentUpsert) SetParentUUID(v string) *CommentUpsert {
	u.Set(comment.FieldParentUUID, v)
	return u
}

// UpdateParentUUID sets the "parent_uuid" field to the value that was provided on create.
func (u *CommentUpsert) UpdateParentUUID() *CommentUpsert {
	u.SetExcluded(comment.FieldParentUUID)
	return u
}

// ClearParentUUID clears the value of the "parent_uuid" field.
func (u *CommentUpsert) ClearParentUUID() *CommentUpsert {
	u.SetNull(comment.FieldParentUUID)
	return u
}

// SetChapterUUID sets the "chapter_uuid" field.
func (u *CommentUpsert) SetChapterUUID(v string) *CommentUpsert {
	u.Set(comment.FieldChapterUUID, v)
	return u
}

// UpdateChapterUUID sets the "chapter_uuid" field to the value that was provided on create.
func (u *CommentUpsert) UpdateChapterUUID() *CommentUpsert {
	u.SetExcluded(comment.FieldChapterUUID)
	return u
}

// ClearChapterUUID clears the value of the "chapter_uuid" field.
func (u *CommentUpsert) ClearChapterUUID() *CommentUpsert {
	u.SetNull(comment.FieldChapterUUID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Comment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(comment.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CommentUpsertOne) UpdateNewValues() *CommentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(comment.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(comment.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Comment.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CommentUpsertOne) Ignore() *CommentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CommentUpsertOne) DoNothing() *CommentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CommentCreate.OnConflict
// documentation for more info.
func (u *CommentUpsertOne) Update(set func(*CommentUpsert)) *CommentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CommentUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CommentUpsertOne) SetUpdatedAt(v time.Time) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateUpdatedAt() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CommentUpsertOne) SetDeletedAt(v time.Time) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateDeletedAt() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *CommentUpsertOne) ClearDeletedAt() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.ClearDeletedAt()
	})
}

// SetText sets the "text" field.
func (u *CommentUpsertOne) SetText(v string) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetText(v)
	})
}

// UpdateText sets the "text" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateText() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateText()
	})
}

// SetAuthorUUID sets the "author_uuid" field.
func (u *CommentUpsertOne) SetAuthorUUID(v string) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetAuthorUUID(v)
	})
}

// UpdateAuthorUUID sets the "author_uuid" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateAuthorUUID() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateAuthorUUID()
	})
}

// SetParentUUID sets the "parent_uuid" field.
func (u *CommentUpsertOne) SetParentUUID(v string) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetParentUUID(v)
	})
}

// UpdateParentUUID sets the "parent_uuid" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateParentUUID() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateParentUUID()
	})
}

// ClearParentUUID clears the value of the "parent_uuid" field.
func (u *CommentUpsertOne) ClearParentUUID() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.ClearParentUUID()
	})
}

// SetChapterUUID sets the "chapter_uuid" field.
func (u *CommentUpsertOne) SetChapterUUID(v string) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetChapterUUID(v)
	})
}

// UpdateChapterUUID sets the "chapter_uuid" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateChapterUUID() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateChapterUUID()
	})
}

// ClearChapterUUID clears the value of the "chapter_uuid" field.
func (u *CommentUpsertOne) ClearChapterUUID() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.ClearChapterUUID()
	})
}

// Exec executes the query.
func (u *CommentUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CommentCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CommentUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CommentUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: CommentUpsertOne.ID is not supported by MySQL driver. Use CommentUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CommentUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CommentCreateBulk is the builder for creating many Comment entities in bulk.
type CommentCreateBulk struct {
	config
	builders []*CommentCreate
	conflict []sql.ConflictOption
}

// Save creates the Comment entities in the database.
func (ccb *CommentCreateBulk) Save(ctx context.Context) ([]*Comment, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Comment, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CommentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CommentCreateBulk) SaveX(ctx context.Context) []*Comment {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CommentCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CommentCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Comment.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CommentUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ccb *CommentCreateBulk) OnConflict(opts ...sql.ConflictOption) *CommentUpsertBulk {
	ccb.conflict = opts
	return &CommentUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Comment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *CommentCreateBulk) OnConflictColumns(columns ...string) *CommentUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &CommentUpsertBulk{
		create: ccb,
	}
}

// CommentUpsertBulk is the builder for "upsert"-ing
// a bulk of Comment nodes.
type CommentUpsertBulk struct {
	create *CommentCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Comment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(comment.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CommentUpsertBulk) UpdateNewValues() *CommentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(comment.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(comment.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Comment.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CommentUpsertBulk) Ignore() *CommentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CommentUpsertBulk) DoNothing() *CommentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CommentCreateBulk.OnConflict
// documentation for more info.
func (u *CommentUpsertBulk) Update(set func(*CommentUpsert)) *CommentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CommentUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CommentUpsertBulk) SetUpdatedAt(v time.Time) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateUpdatedAt() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CommentUpsertBulk) SetDeletedAt(v time.Time) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateDeletedAt() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *CommentUpsertBulk) ClearDeletedAt() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.ClearDeletedAt()
	})
}

// SetText sets the "text" field.
func (u *CommentUpsertBulk) SetText(v string) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetText(v)
	})
}

// UpdateText sets the "text" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateText() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateText()
	})
}

// SetAuthorUUID sets the "author_uuid" field.
func (u *CommentUpsertBulk) SetAuthorUUID(v string) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetAuthorUUID(v)
	})
}

// UpdateAuthorUUID sets the "author_uuid" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateAuthorUUID() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateAuthorUUID()
	})
}

// SetParentUUID sets the "parent_uuid" field.
func (u *CommentUpsertBulk) SetParentUUID(v string) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetParentUUID(v)
	})
}

// UpdateParentUUID sets the "parent_uuid" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateParentUUID() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateParentUUID()
	})
}

// ClearParentUUID clears the value of the "parent_uuid" field.
func (u *CommentUpsertBulk) ClearParentUUID() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.ClearParentUUID()
	})
}

// SetChapterUUID sets the "chapter_uuid" field.
func (u *CommentUpsertBulk) SetChapterUUID(v string) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetChapterUUID(v)
	})
}

// UpdateChapterUUID sets the "chapter_uuid" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateChapterUUID() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateChapterUUID()
	})
}

// ClearChapterUUID clears the value of the "chapter_uuid" field.
func (u *CommentUpsertBulk) ClearChapterUUID() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.ClearChapterUUID()
	})
}

// Exec executes the query.
func (u *CommentUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CommentCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CommentCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CommentUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
