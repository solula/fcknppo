// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"waterfall-backend/internal/modules/stores/db/ent/migrations"
	"waterfall-backend/internal/modules/stores/db/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MigrationsUpdate is the builder for updating Migrations entities.
type MigrationsUpdate struct {
	config
	hooks     []Hook
	mutation  *MigrationsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the MigrationsUpdate builder.
func (mu *MigrationsUpdate) Where(ps ...predicate.Migrations) *MigrationsUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetMigrated sets the "migrated" field.
func (mu *MigrationsUpdate) SetMigrated(i int) *MigrationsUpdate {
	mu.mutation.ResetMigrated()
	mu.mutation.SetMigrated(i)
	return mu
}

// AddMigrated adds i to the "migrated" field.
func (mu *MigrationsUpdate) AddMigrated(i int) *MigrationsUpdate {
	mu.mutation.AddMigrated(i)
	return mu
}

// Mutation returns the MigrationsMutation object of the builder.
func (mu *MigrationsUpdate) Mutation() *MigrationsMutation {
	return mu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MigrationsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, MigrationsMutation](ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MigrationsUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MigrationsUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MigrationsUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (mu *MigrationsUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MigrationsUpdate {
	mu.modifiers = append(mu.modifiers, modifiers...)
	return mu
}

func (mu *MigrationsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(migrations.Table, migrations.Columns, sqlgraph.NewFieldSpec(migrations.FieldID, field.TypeInt))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Migrated(); ok {
		_spec.SetField(migrations.FieldMigrated, field.TypeInt, value)
	}
	if value, ok := mu.mutation.AddedMigrated(); ok {
		_spec.AddField(migrations.FieldMigrated, field.TypeInt, value)
	}
	_spec.AddModifiers(mu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{migrations.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MigrationsUpdateOne is the builder for updating a single Migrations entity.
type MigrationsUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *MigrationsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetMigrated sets the "migrated" field.
func (muo *MigrationsUpdateOne) SetMigrated(i int) *MigrationsUpdateOne {
	muo.mutation.ResetMigrated()
	muo.mutation.SetMigrated(i)
	return muo
}

// AddMigrated adds i to the "migrated" field.
func (muo *MigrationsUpdateOne) AddMigrated(i int) *MigrationsUpdateOne {
	muo.mutation.AddMigrated(i)
	return muo
}

// Mutation returns the MigrationsMutation object of the builder.
func (muo *MigrationsUpdateOne) Mutation() *MigrationsMutation {
	return muo.mutation
}

// Where appends a list predicates to the MigrationsUpdate builder.
func (muo *MigrationsUpdateOne) Where(ps ...predicate.Migrations) *MigrationsUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MigrationsUpdateOne) Select(field string, fields ...string) *MigrationsUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Migrations entity.
func (muo *MigrationsUpdateOne) Save(ctx context.Context) (*Migrations, error) {
	return withHooks[*Migrations, MigrationsMutation](ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MigrationsUpdateOne) SaveX(ctx context.Context) *Migrations {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MigrationsUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MigrationsUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (muo *MigrationsUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MigrationsUpdateOne {
	muo.modifiers = append(muo.modifiers, modifiers...)
	return muo
}

func (muo *MigrationsUpdateOne) sqlSave(ctx context.Context) (_node *Migrations, err error) {
	_spec := sqlgraph.NewUpdateSpec(migrations.Table, migrations.Columns, sqlgraph.NewFieldSpec(migrations.FieldID, field.TypeInt))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Migrations.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, migrations.FieldID)
		for _, f := range fields {
			if !migrations.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != migrations.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Migrated(); ok {
		_spec.SetField(migrations.FieldMigrated, field.TypeInt, value)
	}
	if value, ok := muo.mutation.AddedMigrated(); ok {
		_spec.AddField(migrations.FieldMigrated, field.TypeInt, value)
	}
	_spec.AddModifiers(muo.modifiers...)
	_node = &Migrations{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{migrations.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
