// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"waterfall-backend/internal/modules/stores/db/ent/chapter"
	"waterfall-backend/internal/modules/stores/db/ent/chaptertext"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ChapterText is the model entity for the ChapterText schema.
type ChapterText struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// ChapterUUID holds the value of the "chapter_uuid" field.
	ChapterUUID string `json:"chapter_uuid,omitempty"`
	// Text holds the value of the "text" field.
	Text string `json:"text,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ChapterTextQuery when eager-loading is set.
	Edges        ChapterTextEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ChapterTextEdges holds the relations/edges for other nodes in the graph.
type ChapterTextEdges struct {
	// Chapter holds the value of the chapter edge.
	Chapter *Chapter `json:"chapter,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ChapterOrErr returns the Chapter value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ChapterTextEdges) ChapterOrErr() (*Chapter, error) {
	if e.loadedTypes[0] {
		if e.Chapter == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: chapter.Label}
		}
		return e.Chapter, nil
	}
	return nil, &NotLoadedError{edge: "chapter"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ChapterText) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case chaptertext.FieldID, chaptertext.FieldChapterUUID, chaptertext.FieldText:
			values[i] = new(sql.NullString)
		case chaptertext.FieldCreatedAt, chaptertext.FieldUpdatedAt, chaptertext.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ChapterText fields.
func (ct *ChapterText) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case chaptertext.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ct.ID = value.String
			}
		case chaptertext.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ct.CreatedAt = value.Time
			}
		case chaptertext.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ct.UpdatedAt = value.Time
			}
		case chaptertext.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ct.DeletedAt = new(time.Time)
				*ct.DeletedAt = value.Time
			}
		case chaptertext.FieldChapterUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field chapter_uuid", values[i])
			} else if value.Valid {
				ct.ChapterUUID = value.String
			}
		case chaptertext.FieldText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text", values[i])
			} else if value.Valid {
				ct.Text = value.String
			}
		default:
			ct.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ChapterText.
// This includes values selected through modifiers, order, etc.
func (ct *ChapterText) Value(name string) (ent.Value, error) {
	return ct.selectValues.Get(name)
}

// QueryChapter queries the "chapter" edge of the ChapterText entity.
func (ct *ChapterText) QueryChapter() *ChapterQuery {
	return NewChapterTextClient(ct.config).QueryChapter(ct)
}

// Update returns a builder for updating this ChapterText.
// Note that you need to call ChapterText.Unwrap() before calling this method if this ChapterText
// was returned from a transaction, and the transaction was committed or rolled back.
func (ct *ChapterText) Update() *ChapterTextUpdateOne {
	return NewChapterTextClient(ct.config).UpdateOne(ct)
}

// Unwrap unwraps the ChapterText entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ct *ChapterText) Unwrap() *ChapterText {
	_tx, ok := ct.config.driver.(*txDriver)
	if !ok {
		panic("ent: ChapterText is not a transactional entity")
	}
	ct.config.driver = _tx.drv
	return ct
}

// String implements the fmt.Stringer.
func (ct *ChapterText) String() string {
	var builder strings.Builder
	builder.WriteString("ChapterText(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ct.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ct.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ct.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := ct.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("chapter_uuid=")
	builder.WriteString(ct.ChapterUUID)
	builder.WriteString(", ")
	builder.WriteString("text=")
	builder.WriteString(ct.Text)
	builder.WriteByte(')')
	return builder.String()
}

// ChapterTexts is a parsable slice of ChapterText.
type ChapterTexts []*ChapterText
