// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"waterfall-backend/internal/modules/stores/db/ent/predicate"
	"waterfall-backend/internal/modules/stores/db/ent/seedmigrations"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SeedMigrationsUpdate is the builder for updating SeedMigrations entities.
type SeedMigrationsUpdate struct {
	config
	hooks     []Hook
	mutation  *SeedMigrationsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SeedMigrationsUpdate builder.
func (smu *SeedMigrationsUpdate) Where(ps ...predicate.SeedMigrations) *SeedMigrationsUpdate {
	smu.mutation.Where(ps...)
	return smu
}

// SetMigrated sets the "migrated" field.
func (smu *SeedMigrationsUpdate) SetMigrated(i int) *SeedMigrationsUpdate {
	smu.mutation.ResetMigrated()
	smu.mutation.SetMigrated(i)
	return smu
}

// AddMigrated adds i to the "migrated" field.
func (smu *SeedMigrationsUpdate) AddMigrated(i int) *SeedMigrationsUpdate {
	smu.mutation.AddMigrated(i)
	return smu
}

// Mutation returns the SeedMigrationsMutation object of the builder.
func (smu *SeedMigrationsUpdate) Mutation() *SeedMigrationsMutation {
	return smu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (smu *SeedMigrationsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, SeedMigrationsMutation](ctx, smu.sqlSave, smu.mutation, smu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (smu *SeedMigrationsUpdate) SaveX(ctx context.Context) int {
	affected, err := smu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (smu *SeedMigrationsUpdate) Exec(ctx context.Context) error {
	_, err := smu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smu *SeedMigrationsUpdate) ExecX(ctx context.Context) {
	if err := smu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (smu *SeedMigrationsUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SeedMigrationsUpdate {
	smu.modifiers = append(smu.modifiers, modifiers...)
	return smu
}

func (smu *SeedMigrationsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(seedmigrations.Table, seedmigrations.Columns, sqlgraph.NewFieldSpec(seedmigrations.FieldID, field.TypeInt))
	if ps := smu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := smu.mutation.Migrated(); ok {
		_spec.SetField(seedmigrations.FieldMigrated, field.TypeInt, value)
	}
	if value, ok := smu.mutation.AddedMigrated(); ok {
		_spec.AddField(seedmigrations.FieldMigrated, field.TypeInt, value)
	}
	_spec.AddModifiers(smu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, smu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{seedmigrations.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	smu.mutation.done = true
	return n, nil
}

// SeedMigrationsUpdateOne is the builder for updating a single SeedMigrations entity.
type SeedMigrationsUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SeedMigrationsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetMigrated sets the "migrated" field.
func (smuo *SeedMigrationsUpdateOne) SetMigrated(i int) *SeedMigrationsUpdateOne {
	smuo.mutation.ResetMigrated()
	smuo.mutation.SetMigrated(i)
	return smuo
}

// AddMigrated adds i to the "migrated" field.
func (smuo *SeedMigrationsUpdateOne) AddMigrated(i int) *SeedMigrationsUpdateOne {
	smuo.mutation.AddMigrated(i)
	return smuo
}

// Mutation returns the SeedMigrationsMutation object of the builder.
func (smuo *SeedMigrationsUpdateOne) Mutation() *SeedMigrationsMutation {
	return smuo.mutation
}

// Where appends a list predicates to the SeedMigrationsUpdate builder.
func (smuo *SeedMigrationsUpdateOne) Where(ps ...predicate.SeedMigrations) *SeedMigrationsUpdateOne {
	smuo.mutation.Where(ps...)
	return smuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (smuo *SeedMigrationsUpdateOne) Select(field string, fields ...string) *SeedMigrationsUpdateOne {
	smuo.fields = append([]string{field}, fields...)
	return smuo
}

// Save executes the query and returns the updated SeedMigrations entity.
func (smuo *SeedMigrationsUpdateOne) Save(ctx context.Context) (*SeedMigrations, error) {
	return withHooks[*SeedMigrations, SeedMigrationsMutation](ctx, smuo.sqlSave, smuo.mutation, smuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (smuo *SeedMigrationsUpdateOne) SaveX(ctx context.Context) *SeedMigrations {
	node, err := smuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (smuo *SeedMigrationsUpdateOne) Exec(ctx context.Context) error {
	_, err := smuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smuo *SeedMigrationsUpdateOne) ExecX(ctx context.Context) {
	if err := smuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (smuo *SeedMigrationsUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SeedMigrationsUpdateOne {
	smuo.modifiers = append(smuo.modifiers, modifiers...)
	return smuo
}

func (smuo *SeedMigrationsUpdateOne) sqlSave(ctx context.Context) (_node *SeedMigrations, err error) {
	_spec := sqlgraph.NewUpdateSpec(seedmigrations.Table, seedmigrations.Columns, sqlgraph.NewFieldSpec(seedmigrations.FieldID, field.TypeInt))
	id, ok := smuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SeedMigrations.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := smuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, seedmigrations.FieldID)
		for _, f := range fields {
			if !seedmigrations.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != seedmigrations.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := smuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := smuo.mutation.Migrated(); ok {
		_spec.SetField(seedmigrations.FieldMigrated, field.TypeInt, value)
	}
	if value, ok := smuo.mutation.AddedMigrated(); ok {
		_spec.AddField(seedmigrations.FieldMigrated, field.TypeInt, value)
	}
	_spec.AddModifiers(smuo.modifiers...)
	_node = &SeedMigrations{config: smuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, smuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{seedmigrations.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	smuo.mutation.done = true
	return _node, nil
}
