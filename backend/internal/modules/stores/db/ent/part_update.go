// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"waterfall-backend/internal/modules/stores/db/ent/chapter"
	"waterfall-backend/internal/modules/stores/db/ent/part"
	"waterfall-backend/internal/modules/stores/db/ent/predicate"
	"waterfall-backend/internal/modules/stores/db/ent/release"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PartUpdate is the builder for updating Part entities.
type PartUpdate struct {
	config
	hooks     []Hook
	mutation  *PartMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PartUpdate builder.
func (pu *PartUpdate) Where(ps ...predicate.Part) *PartUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PartUpdate) SetUpdatedAt(t time.Time) *PartUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetDeletedAt sets the "deleted_at" field.
func (pu *PartUpdate) SetDeletedAt(t time.Time) *PartUpdate {
	pu.mutation.SetDeletedAt(t)
	return pu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pu *PartUpdate) SetNillableDeletedAt(t *time.Time) *PartUpdate {
	if t != nil {
		pu.SetDeletedAt(*t)
	}
	return pu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pu *PartUpdate) ClearDeletedAt() *PartUpdate {
	pu.mutation.ClearDeletedAt()
	return pu
}

// SetNumber sets the "number" field.
func (pu *PartUpdate) SetNumber(i int) *PartUpdate {
	pu.mutation.ResetNumber()
	pu.mutation.SetNumber(i)
	return pu
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (pu *PartUpdate) SetNillableNumber(i *int) *PartUpdate {
	if i != nil {
		pu.SetNumber(*i)
	}
	return pu
}

// AddNumber adds i to the "number" field.
func (pu *PartUpdate) AddNumber(i int) *PartUpdate {
	pu.mutation.AddNumber(i)
	return pu
}

// ClearNumber clears the value of the "number" field.
func (pu *PartUpdate) ClearNumber() *PartUpdate {
	pu.mutation.ClearNumber()
	return pu
}

// SetTitle sets the "title" field.
func (pu *PartUpdate) SetTitle(s string) *PartUpdate {
	pu.mutation.SetTitle(s)
	return pu
}

// SetAnnotation sets the "annotation" field.
func (pu *PartUpdate) SetAnnotation(s string) *PartUpdate {
	pu.mutation.SetAnnotation(s)
	return pu
}

// SetNillableAnnotation sets the "annotation" field if the given value is not nil.
func (pu *PartUpdate) SetNillableAnnotation(s *string) *PartUpdate {
	if s != nil {
		pu.SetAnnotation(*s)
	}
	return pu
}

// ClearAnnotation clears the value of the "annotation" field.
func (pu *PartUpdate) ClearAnnotation() *PartUpdate {
	pu.mutation.ClearAnnotation()
	return pu
}

// SetReleaseUUID sets the "release_uuid" field.
func (pu *PartUpdate) SetReleaseUUID(s string) *PartUpdate {
	pu.mutation.SetReleaseUUID(s)
	return pu
}

// SetNillableReleaseUUID sets the "release_uuid" field if the given value is not nil.
func (pu *PartUpdate) SetNillableReleaseUUID(s *string) *PartUpdate {
	if s != nil {
		pu.SetReleaseUUID(*s)
	}
	return pu
}

// ClearReleaseUUID clears the value of the "release_uuid" field.
func (pu *PartUpdate) ClearReleaseUUID() *PartUpdate {
	pu.mutation.ClearReleaseUUID()
	return pu
}

// AddChapterIDs adds the "chapters" edge to the Chapter entity by IDs.
func (pu *PartUpdate) AddChapterIDs(ids ...string) *PartUpdate {
	pu.mutation.AddChapterIDs(ids...)
	return pu
}

// AddChapters adds the "chapters" edges to the Chapter entity.
func (pu *PartUpdate) AddChapters(c ...*Chapter) *PartUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.AddChapterIDs(ids...)
}

// SetReleaseID sets the "release" edge to the Release entity by ID.
func (pu *PartUpdate) SetReleaseID(id string) *PartUpdate {
	pu.mutation.SetReleaseID(id)
	return pu
}

// SetNillableReleaseID sets the "release" edge to the Release entity by ID if the given value is not nil.
func (pu *PartUpdate) SetNillableReleaseID(id *string) *PartUpdate {
	if id != nil {
		pu = pu.SetReleaseID(*id)
	}
	return pu
}

// SetRelease sets the "release" edge to the Release entity.
func (pu *PartUpdate) SetRelease(r *Release) *PartUpdate {
	return pu.SetReleaseID(r.ID)
}

// Mutation returns the PartMutation object of the builder.
func (pu *PartUpdate) Mutation() *PartMutation {
	return pu.mutation
}

// ClearChapters clears all "chapters" edges to the Chapter entity.
func (pu *PartUpdate) ClearChapters() *PartUpdate {
	pu.mutation.ClearChapters()
	return pu
}

// RemoveChapterIDs removes the "chapters" edge to Chapter entities by IDs.
func (pu *PartUpdate) RemoveChapterIDs(ids ...string) *PartUpdate {
	pu.mutation.RemoveChapterIDs(ids...)
	return pu
}

// RemoveChapters removes "chapters" edges to Chapter entities.
func (pu *PartUpdate) RemoveChapters(c ...*Chapter) *PartUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.RemoveChapterIDs(ids...)
}

// ClearRelease clears the "release" edge to the Release entity.
func (pu *PartUpdate) ClearRelease() *PartUpdate {
	pu.mutation.ClearRelease()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PartUpdate) Save(ctx context.Context) (int, error) {
	if err := pu.defaults(); err != nil {
		return 0, err
	}
	return withHooks[int, PartMutation](ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PartUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PartUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PartUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PartUpdate) defaults() error {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		if part.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized part.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := part.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pu *PartUpdate) check() error {
	if v, ok := pu.mutation.Number(); ok {
		if err := part.NumberValidator(v); err != nil {
			return &ValidationError{Name: "number", err: fmt.Errorf(`ent: validator failed for field "Part.number": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pu *PartUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PartUpdate {
	pu.modifiers = append(pu.modifiers, modifiers...)
	return pu
}

func (pu *PartUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(part.Table, part.Columns, sqlgraph.NewFieldSpec(part.FieldID, field.TypeString))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(part.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.DeletedAt(); ok {
		_spec.SetField(part.FieldDeletedAt, field.TypeTime, value)
	}
	if pu.mutation.DeletedAtCleared() {
		_spec.ClearField(part.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := pu.mutation.Number(); ok {
		_spec.SetField(part.FieldNumber, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedNumber(); ok {
		_spec.AddField(part.FieldNumber, field.TypeInt, value)
	}
	if pu.mutation.NumberCleared() {
		_spec.ClearField(part.FieldNumber, field.TypeInt)
	}
	if value, ok := pu.mutation.Title(); ok {
		_spec.SetField(part.FieldTitle, field.TypeString, value)
	}
	if value, ok := pu.mutation.Annotation(); ok {
		_spec.SetField(part.FieldAnnotation, field.TypeString, value)
	}
	if pu.mutation.AnnotationCleared() {
		_spec.ClearField(part.FieldAnnotation, field.TypeString)
	}
	if pu.mutation.ChaptersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   part.ChaptersTable,
			Columns: []string{part.ChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chapter.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedChaptersIDs(); len(nodes) > 0 && !pu.mutation.ChaptersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   part.ChaptersTable,
			Columns: []string{part.ChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chapter.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ChaptersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   part.ChaptersTable,
			Columns: []string{part.ChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chapter.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ReleaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   part.ReleaseTable,
			Columns: []string{part.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(release.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ReleaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   part.ReleaseTable,
			Columns: []string{part.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(release.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(pu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{part.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PartUpdateOne is the builder for updating a single Part entity.
type PartUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PartMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PartUpdateOne) SetUpdatedAt(t time.Time) *PartUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetDeletedAt sets the "deleted_at" field.
func (puo *PartUpdateOne) SetDeletedAt(t time.Time) *PartUpdateOne {
	puo.mutation.SetDeletedAt(t)
	return puo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (puo *PartUpdateOne) SetNillableDeletedAt(t *time.Time) *PartUpdateOne {
	if t != nil {
		puo.SetDeletedAt(*t)
	}
	return puo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (puo *PartUpdateOne) ClearDeletedAt() *PartUpdateOne {
	puo.mutation.ClearDeletedAt()
	return puo
}

// SetNumber sets the "number" field.
func (puo *PartUpdateOne) SetNumber(i int) *PartUpdateOne {
	puo.mutation.ResetNumber()
	puo.mutation.SetNumber(i)
	return puo
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (puo *PartUpdateOne) SetNillableNumber(i *int) *PartUpdateOne {
	if i != nil {
		puo.SetNumber(*i)
	}
	return puo
}

// AddNumber adds i to the "number" field.
func (puo *PartUpdateOne) AddNumber(i int) *PartUpdateOne {
	puo.mutation.AddNumber(i)
	return puo
}

// ClearNumber clears the value of the "number" field.
func (puo *PartUpdateOne) ClearNumber() *PartUpdateOne {
	puo.mutation.ClearNumber()
	return puo
}

// SetTitle sets the "title" field.
func (puo *PartUpdateOne) SetTitle(s string) *PartUpdateOne {
	puo.mutation.SetTitle(s)
	return puo
}

// SetAnnotation sets the "annotation" field.
func (puo *PartUpdateOne) SetAnnotation(s string) *PartUpdateOne {
	puo.mutation.SetAnnotation(s)
	return puo
}

// SetNillableAnnotation sets the "annotation" field if the given value is not nil.
func (puo *PartUpdateOne) SetNillableAnnotation(s *string) *PartUpdateOne {
	if s != nil {
		puo.SetAnnotation(*s)
	}
	return puo
}

// ClearAnnotation clears the value of the "annotation" field.
func (puo *PartUpdateOne) ClearAnnotation() *PartUpdateOne {
	puo.mutation.ClearAnnotation()
	return puo
}

// SetReleaseUUID sets the "release_uuid" field.
func (puo *PartUpdateOne) SetReleaseUUID(s string) *PartUpdateOne {
	puo.mutation.SetReleaseUUID(s)
	return puo
}

// SetNillableReleaseUUID sets the "release_uuid" field if the given value is not nil.
func (puo *PartUpdateOne) SetNillableReleaseUUID(s *string) *PartUpdateOne {
	if s != nil {
		puo.SetReleaseUUID(*s)
	}
	return puo
}

// ClearReleaseUUID clears the value of the "release_uuid" field.
func (puo *PartUpdateOne) ClearReleaseUUID() *PartUpdateOne {
	puo.mutation.ClearReleaseUUID()
	return puo
}

// AddChapterIDs adds the "chapters" edge to the Chapter entity by IDs.
func (puo *PartUpdateOne) AddChapterIDs(ids ...string) *PartUpdateOne {
	puo.mutation.AddChapterIDs(ids...)
	return puo
}

// AddChapters adds the "chapters" edges to the Chapter entity.
func (puo *PartUpdateOne) AddChapters(c ...*Chapter) *PartUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.AddChapterIDs(ids...)
}

// SetReleaseID sets the "release" edge to the Release entity by ID.
func (puo *PartUpdateOne) SetReleaseID(id string) *PartUpdateOne {
	puo.mutation.SetReleaseID(id)
	return puo
}

// SetNillableReleaseID sets the "release" edge to the Release entity by ID if the given value is not nil.
func (puo *PartUpdateOne) SetNillableReleaseID(id *string) *PartUpdateOne {
	if id != nil {
		puo = puo.SetReleaseID(*id)
	}
	return puo
}

// SetRelease sets the "release" edge to the Release entity.
func (puo *PartUpdateOne) SetRelease(r *Release) *PartUpdateOne {
	return puo.SetReleaseID(r.ID)
}

// Mutation returns the PartMutation object of the builder.
func (puo *PartUpdateOne) Mutation() *PartMutation {
	return puo.mutation
}

// ClearChapters clears all "chapters" edges to the Chapter entity.
func (puo *PartUpdateOne) ClearChapters() *PartUpdateOne {
	puo.mutation.ClearChapters()
	return puo
}

// RemoveChapterIDs removes the "chapters" edge to Chapter entities by IDs.
func (puo *PartUpdateOne) RemoveChapterIDs(ids ...string) *PartUpdateOne {
	puo.mutation.RemoveChapterIDs(ids...)
	return puo
}

// RemoveChapters removes "chapters" edges to Chapter entities.
func (puo *PartUpdateOne) RemoveChapters(c ...*Chapter) *PartUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.RemoveChapterIDs(ids...)
}

// ClearRelease clears the "release" edge to the Release entity.
func (puo *PartUpdateOne) ClearRelease() *PartUpdateOne {
	puo.mutation.ClearRelease()
	return puo
}

// Where appends a list predicates to the PartUpdate builder.
func (puo *PartUpdateOne) Where(ps ...predicate.Part) *PartUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PartUpdateOne) Select(field string, fields ...string) *PartUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Part entity.
func (puo *PartUpdateOne) Save(ctx context.Context) (*Part, error) {
	if err := puo.defaults(); err != nil {
		return nil, err
	}
	return withHooks[*Part, PartMutation](ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PartUpdateOne) SaveX(ctx context.Context) *Part {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PartUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PartUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PartUpdateOne) defaults() error {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		if part.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized part.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := part.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (puo *PartUpdateOne) check() error {
	if v, ok := puo.mutation.Number(); ok {
		if err := part.NumberValidator(v); err != nil {
			return &ValidationError{Name: "number", err: fmt.Errorf(`ent: validator failed for field "Part.number": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (puo *PartUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PartUpdateOne {
	puo.modifiers = append(puo.modifiers, modifiers...)
	return puo
}

func (puo *PartUpdateOne) sqlSave(ctx context.Context) (_node *Part, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(part.Table, part.Columns, sqlgraph.NewFieldSpec(part.FieldID, field.TypeString))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Part.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, part.FieldID)
		for _, f := range fields {
			if !part.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != part.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(part.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.DeletedAt(); ok {
		_spec.SetField(part.FieldDeletedAt, field.TypeTime, value)
	}
	if puo.mutation.DeletedAtCleared() {
		_spec.ClearField(part.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := puo.mutation.Number(); ok {
		_spec.SetField(part.FieldNumber, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedNumber(); ok {
		_spec.AddField(part.FieldNumber, field.TypeInt, value)
	}
	if puo.mutation.NumberCleared() {
		_spec.ClearField(part.FieldNumber, field.TypeInt)
	}
	if value, ok := puo.mutation.Title(); ok {
		_spec.SetField(part.FieldTitle, field.TypeString, value)
	}
	if value, ok := puo.mutation.Annotation(); ok {
		_spec.SetField(part.FieldAnnotation, field.TypeString, value)
	}
	if puo.mutation.AnnotationCleared() {
		_spec.ClearField(part.FieldAnnotation, field.TypeString)
	}
	if puo.mutation.ChaptersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   part.ChaptersTable,
			Columns: []string{part.ChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chapter.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedChaptersIDs(); len(nodes) > 0 && !puo.mutation.ChaptersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   part.ChaptersTable,
			Columns: []string{part.ChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chapter.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ChaptersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   part.ChaptersTable,
			Columns: []string{part.ChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chapter.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ReleaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   part.ReleaseTable,
			Columns: []string{part.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(release.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ReleaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   part.ReleaseTable,
			Columns: []string{part.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(release.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(puo.modifiers...)
	_node = &Part{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{part.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
