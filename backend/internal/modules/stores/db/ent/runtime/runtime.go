// Code generated by ent, DO NOT EDIT.

package runtime

import (
	"context"
	"time"
	"waterfall-backend/internal/modules/stores/db/ent/chapter"
	"waterfall-backend/internal/modules/stores/db/ent/chaptertext"
	"waterfall-backend/internal/modules/stores/db/ent/comment"
	"waterfall-backend/internal/modules/stores/db/ent/file"
	"waterfall-backend/internal/modules/stores/db/ent/migrations"
	"waterfall-backend/internal/modules/stores/db/ent/part"
	"waterfall-backend/internal/modules/stores/db/ent/permission"
	"waterfall-backend/internal/modules/stores/db/ent/release"
	"waterfall-backend/internal/modules/stores/db/ent/role"
	"waterfall-backend/internal/modules/stores/db/ent/seedmigrations"
	"waterfall-backend/internal/modules/stores/db/ent/user"
	"waterfall-backend/internal/modules/stores/db/schema"

	"entgo.io/ent"
	"entgo.io/ent/privacy"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	chapterMixin := schema.Chapter{}.Mixin()
	chapter.Policy = privacy.NewPolicies(schema.Chapter{})
	chapter.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := chapter.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	chapterMixinHooks2 := chapterMixin[2].Hooks()

	chapter.Hooks[1] = chapterMixinHooks2[0]
	chapterMixinInters2 := chapterMixin[2].Interceptors()
	chapter.Interceptors[0] = chapterMixinInters2[0]
	chapterMixinFields0 := chapterMixin[0].Fields()
	_ = chapterMixinFields0
	chapterMixinFields1 := chapterMixin[1].Fields()
	_ = chapterMixinFields1
	chapterFields := schema.Chapter{}.Fields()
	_ = chapterFields
	// chapterDescCreatedAt is the schema descriptor for created_at field.
	chapterDescCreatedAt := chapterMixinFields1[0].Descriptor()
	// chapter.DefaultCreatedAt holds the default value on creation for the created_at field.
	chapter.DefaultCreatedAt = chapterDescCreatedAt.Default.(func() time.Time)
	// chapterDescUpdatedAt is the schema descriptor for updated_at field.
	chapterDescUpdatedAt := chapterMixinFields1[1].Descriptor()
	// chapter.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	chapter.DefaultUpdatedAt = chapterDescUpdatedAt.Default.(func() time.Time)
	// chapter.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	chapter.UpdateDefaultUpdatedAt = chapterDescUpdatedAt.UpdateDefault.(func() time.Time)
	// chapterDescNumber is the schema descriptor for number field.
	chapterDescNumber := chapterFields[0].Descriptor()
	// chapter.NumberValidator is a validator for the "number" field. It is called by the builders before save.
	chapter.NumberValidator = chapterDescNumber.Validators[0].(func(int) error)
	// chapterDescID is the schema descriptor for id field.
	chapterDescID := chapterMixinFields0[0].Descriptor()
	// chapter.DefaultID holds the default value on creation for the id field.
	chapter.DefaultID = chapterDescID.Default.(func() string)
	chaptertextMixin := schema.ChapterText{}.Mixin()
	chaptertext.Policy = privacy.NewPolicies(schema.ChapterText{})
	chaptertext.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := chaptertext.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	chaptertextMixinHooks2 := chaptertextMixin[2].Hooks()

	chaptertext.Hooks[1] = chaptertextMixinHooks2[0]
	chaptertextMixinInters2 := chaptertextMixin[2].Interceptors()
	chaptertext.Interceptors[0] = chaptertextMixinInters2[0]
	chaptertextMixinFields0 := chaptertextMixin[0].Fields()
	_ = chaptertextMixinFields0
	chaptertextMixinFields1 := chaptertextMixin[1].Fields()
	_ = chaptertextMixinFields1
	chaptertextFields := schema.ChapterText{}.Fields()
	_ = chaptertextFields
	// chaptertextDescCreatedAt is the schema descriptor for created_at field.
	chaptertextDescCreatedAt := chaptertextMixinFields1[0].Descriptor()
	// chaptertext.DefaultCreatedAt holds the default value on creation for the created_at field.
	chaptertext.DefaultCreatedAt = chaptertextDescCreatedAt.Default.(func() time.Time)
	// chaptertextDescUpdatedAt is the schema descriptor for updated_at field.
	chaptertextDescUpdatedAt := chaptertextMixinFields1[1].Descriptor()
	// chaptertext.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	chaptertext.DefaultUpdatedAt = chaptertextDescUpdatedAt.Default.(func() time.Time)
	// chaptertext.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	chaptertext.UpdateDefaultUpdatedAt = chaptertextDescUpdatedAt.UpdateDefault.(func() time.Time)
	// chaptertextDescID is the schema descriptor for id field.
	chaptertextDescID := chaptertextMixinFields0[0].Descriptor()
	// chaptertext.DefaultID holds the default value on creation for the id field.
	chaptertext.DefaultID = chaptertextDescID.Default.(func() string)
	commentMixin := schema.Comment{}.Mixin()
	comment.Policy = privacy.NewPolicies(schema.Comment{})
	comment.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := comment.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	commentMixinHooks2 := commentMixin[2].Hooks()

	comment.Hooks[1] = commentMixinHooks2[0]
	commentMixinInters2 := commentMixin[2].Interceptors()
	comment.Interceptors[0] = commentMixinInters2[0]
	commentMixinFields0 := commentMixin[0].Fields()
	_ = commentMixinFields0
	commentMixinFields1 := commentMixin[1].Fields()
	_ = commentMixinFields1
	commentFields := schema.Comment{}.Fields()
	_ = commentFields
	// commentDescCreatedAt is the schema descriptor for created_at field.
	commentDescCreatedAt := commentMixinFields1[0].Descriptor()
	// comment.DefaultCreatedAt holds the default value on creation for the created_at field.
	comment.DefaultCreatedAt = commentDescCreatedAt.Default.(func() time.Time)
	// commentDescUpdatedAt is the schema descriptor for updated_at field.
	commentDescUpdatedAt := commentMixinFields1[1].Descriptor()
	// comment.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	comment.DefaultUpdatedAt = commentDescUpdatedAt.Default.(func() time.Time)
	// comment.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	comment.UpdateDefaultUpdatedAt = commentDescUpdatedAt.UpdateDefault.(func() time.Time)
	// commentDescText is the schema descriptor for text field.
	commentDescText := commentFields[0].Descriptor()
	// comment.TextValidator is a validator for the "text" field. It is called by the builders before save.
	comment.TextValidator = commentDescText.Validators[0].(func(string) error)
	// commentDescID is the schema descriptor for id field.
	commentDescID := commentMixinFields0[0].Descriptor()
	// comment.DefaultID holds the default value on creation for the id field.
	comment.DefaultID = commentDescID.Default.(func() string)
	fileMixin := schema.File{}.Mixin()
	file.Policy = privacy.NewPolicies(schema.File{})
	file.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := file.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	fileMixinFields0 := fileMixin[0].Fields()
	_ = fileMixinFields0
	fileMixinFields1 := fileMixin[1].Fields()
	_ = fileMixinFields1
	fileFields := schema.File{}.Fields()
	_ = fileFields
	// fileDescCreatedAt is the schema descriptor for created_at field.
	fileDescCreatedAt := fileMixinFields1[0].Descriptor()
	// file.DefaultCreatedAt holds the default value on creation for the created_at field.
	file.DefaultCreatedAt = fileDescCreatedAt.Default.(func() time.Time)
	// fileDescUpdatedAt is the schema descriptor for updated_at field.
	fileDescUpdatedAt := fileMixinFields1[1].Descriptor()
	// file.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	file.DefaultUpdatedAt = fileDescUpdatedAt.Default.(func() time.Time)
	// file.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	file.UpdateDefaultUpdatedAt = fileDescUpdatedAt.UpdateDefault.(func() time.Time)
	// fileDescID is the schema descriptor for id field.
	fileDescID := fileMixinFields0[0].Descriptor()
	// file.DefaultID holds the default value on creation for the id field.
	file.DefaultID = fileDescID.Default.(func() string)
	migrations.Policy = privacy.NewPolicies(schema.Migrations{})
	migrations.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := migrations.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	partMixin := schema.Part{}.Mixin()
	part.Policy = privacy.NewPolicies(schema.Part{})
	part.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := part.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	partMixinHooks2 := partMixin[2].Hooks()

	part.Hooks[1] = partMixinHooks2[0]
	partMixinInters2 := partMixin[2].Interceptors()
	part.Interceptors[0] = partMixinInters2[0]
	partMixinFields0 := partMixin[0].Fields()
	_ = partMixinFields0
	partMixinFields1 := partMixin[1].Fields()
	_ = partMixinFields1
	partFields := schema.Part{}.Fields()
	_ = partFields
	// partDescCreatedAt is the schema descriptor for created_at field.
	partDescCreatedAt := partMixinFields1[0].Descriptor()
	// part.DefaultCreatedAt holds the default value on creation for the created_at field.
	part.DefaultCreatedAt = partDescCreatedAt.Default.(func() time.Time)
	// partDescUpdatedAt is the schema descriptor for updated_at field.
	partDescUpdatedAt := partMixinFields1[1].Descriptor()
	// part.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	part.DefaultUpdatedAt = partDescUpdatedAt.Default.(func() time.Time)
	// part.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	part.UpdateDefaultUpdatedAt = partDescUpdatedAt.UpdateDefault.(func() time.Time)
	// partDescNumber is the schema descriptor for number field.
	partDescNumber := partFields[0].Descriptor()
	// part.NumberValidator is a validator for the "number" field. It is called by the builders before save.
	part.NumberValidator = partDescNumber.Validators[0].(func(int) error)
	// partDescID is the schema descriptor for id field.
	partDescID := partMixinFields0[0].Descriptor()
	// part.DefaultID holds the default value on creation for the id field.
	part.DefaultID = partDescID.Default.(func() string)
	permission.Policy = privacy.NewPolicies(schema.Permission{})
	permission.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := permission.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	releaseMixin := schema.Release{}.Mixin()
	release.Policy = privacy.NewPolicies(schema.Release{})
	release.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := release.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	releaseMixinFields0 := releaseMixin[0].Fields()
	_ = releaseMixinFields0
	releaseMixinFields1 := releaseMixin[1].Fields()
	_ = releaseMixinFields1
	releaseFields := schema.Release{}.Fields()
	_ = releaseFields
	// releaseDescCreatedAt is the schema descriptor for created_at field.
	releaseDescCreatedAt := releaseMixinFields1[0].Descriptor()
	// release.DefaultCreatedAt holds the default value on creation for the created_at field.
	release.DefaultCreatedAt = releaseDescCreatedAt.Default.(func() time.Time)
	// releaseDescUpdatedAt is the schema descriptor for updated_at field.
	releaseDescUpdatedAt := releaseMixinFields1[1].Descriptor()
	// release.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	release.DefaultUpdatedAt = releaseDescUpdatedAt.Default.(func() time.Time)
	// release.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	release.UpdateDefaultUpdatedAt = releaseDescUpdatedAt.UpdateDefault.(func() time.Time)
	// releaseDescID is the schema descriptor for id field.
	releaseDescID := releaseMixinFields0[0].Descriptor()
	// release.DefaultID holds the default value on creation for the id field.
	release.DefaultID = releaseDescID.Default.(func() string)
	role.Policy = privacy.NewPolicies(schema.Role{})
	role.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := role.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	seedmigrations.Policy = privacy.NewPolicies(schema.SeedMigrations{})
	seedmigrations.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := seedmigrations.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	userMixin := schema.User{}.Mixin()
	user.Policy = privacy.NewPolicies(schema.User{})
	user.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := user.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	userMixinHooks2 := userMixin[2].Hooks()

	user.Hooks[1] = userMixinHooks2[0]
	userMixinInters2 := userMixin[2].Interceptors()
	user.Interceptors[0] = userMixinInters2[0]
	userMixinFields0 := userMixin[0].Fields()
	_ = userMixinFields0
	userMixinFields1 := userMixin[1].Fields()
	_ = userMixinFields1
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userMixinFields1[0].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userMixinFields1[1].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(func() time.Time)
	// user.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	user.UpdateDefaultUpdatedAt = userDescUpdatedAt.UpdateDefault.(func() time.Time)
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[0].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
	// userDescScore is the schema descriptor for score field.
	userDescScore := userFields[5].Descriptor()
	// user.DefaultScore holds the default value on creation for the score field.
	user.DefaultScore = userDescScore.Default.(int)
	// user.ScoreValidator is a validator for the "score" field. It is called by the builders before save.
	user.ScoreValidator = userDescScore.Validators[0].(func(int) error)
	// userDescEmailVerified is the schema descriptor for email_verified field.
	userDescEmailVerified := userFields[6].Descriptor()
	// user.DefaultEmailVerified holds the default value on creation for the email_verified field.
	user.DefaultEmailVerified = userDescEmailVerified.Default.(bool)
	// userDescID is the schema descriptor for id field.
	userDescID := userMixinFields0[0].Descriptor()
	// user.DefaultID holds the default value on creation for the id field.
	user.DefaultID = userDescID.Default.(func() string)
}

const (
	Version = "v0.12.0"                                         // Version of ent codegen.
	Sum     = "h1:DTub/yd0pMK9s0ONfZps2cYkyD2VPIuknVBv10BESc0=" // Sum of ent codegen.
)
