// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"waterfall-backend/internal/modules/stores/db/ent/chapter"
	"waterfall-backend/internal/modules/stores/db/ent/chaptertext"
	"waterfall-backend/internal/modules/stores/db/ent/part"
	"waterfall-backend/internal/modules/stores/db/ent/release"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Chapter is the model entity for the Chapter schema.
type Chapter struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Number holds the value of the "number" field.
	Number int `json:"number,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// PartUUID holds the value of the "part_uuid" field.
	PartUUID string `json:"part_uuid,omitempty"`
	// ReleaseUUID holds the value of the "release_uuid" field.
	ReleaseUUID *string `json:"release_uuid,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ChapterQuery when eager-loading is set.
	Edges        ChapterEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ChapterEdges holds the relations/edges for other nodes in the graph.
type ChapterEdges struct {
	// Part holds the value of the part edge.
	Part *Part `json:"part,omitempty"`
	// Release holds the value of the release edge.
	Release *Release `json:"release,omitempty"`
	// Comments holds the value of the comments edge.
	Comments []*Comment `json:"comments,omitempty"`
	// ChapterText holds the value of the chapter_text edge.
	ChapterText *ChapterText `json:"chapter_text,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// PartOrErr returns the Part value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ChapterEdges) PartOrErr() (*Part, error) {
	if e.loadedTypes[0] {
		if e.Part == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: part.Label}
		}
		return e.Part, nil
	}
	return nil, &NotLoadedError{edge: "part"}
}

// ReleaseOrErr returns the Release value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ChapterEdges) ReleaseOrErr() (*Release, error) {
	if e.loadedTypes[1] {
		if e.Release == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: release.Label}
		}
		return e.Release, nil
	}
	return nil, &NotLoadedError{edge: "release"}
}

// CommentsOrErr returns the Comments value or an error if the edge
// was not loaded in eager-loading.
func (e ChapterEdges) CommentsOrErr() ([]*Comment, error) {
	if e.loadedTypes[2] {
		return e.Comments, nil
	}
	return nil, &NotLoadedError{edge: "comments"}
}

// ChapterTextOrErr returns the ChapterText value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ChapterEdges) ChapterTextOrErr() (*ChapterText, error) {
	if e.loadedTypes[3] {
		if e.ChapterText == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: chaptertext.Label}
		}
		return e.ChapterText, nil
	}
	return nil, &NotLoadedError{edge: "chapter_text"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Chapter) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case chapter.FieldNumber:
			values[i] = new(sql.NullInt64)
		case chapter.FieldID, chapter.FieldTitle, chapter.FieldPartUUID, chapter.FieldReleaseUUID:
			values[i] = new(sql.NullString)
		case chapter.FieldCreatedAt, chapter.FieldUpdatedAt, chapter.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Chapter fields.
func (c *Chapter) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case chapter.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				c.ID = value.String
			}
		case chapter.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case chapter.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		case chapter.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				c.DeletedAt = new(time.Time)
				*c.DeletedAt = value.Time
			}
		case chapter.FieldNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field number", values[i])
			} else if value.Valid {
				c.Number = int(value.Int64)
			}
		case chapter.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				c.Title = value.String
			}
		case chapter.FieldPartUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field part_uuid", values[i])
			} else if value.Valid {
				c.PartUUID = value.String
			}
		case chapter.FieldReleaseUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field release_uuid", values[i])
			} else if value.Valid {
				c.ReleaseUUID = new(string)
				*c.ReleaseUUID = value.String
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Chapter.
// This includes values selected through modifiers, order, etc.
func (c *Chapter) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryPart queries the "part" edge of the Chapter entity.
func (c *Chapter) QueryPart() *PartQuery {
	return NewChapterClient(c.config).QueryPart(c)
}

// QueryRelease queries the "release" edge of the Chapter entity.
func (c *Chapter) QueryRelease() *ReleaseQuery {
	return NewChapterClient(c.config).QueryRelease(c)
}

// QueryComments queries the "comments" edge of the Chapter entity.
func (c *Chapter) QueryComments() *CommentQuery {
	return NewChapterClient(c.config).QueryComments(c)
}

// QueryChapterText queries the "chapter_text" edge of the Chapter entity.
func (c *Chapter) QueryChapterText() *ChapterTextQuery {
	return NewChapterClient(c.config).QueryChapterText(c)
}

// Update returns a builder for updating this Chapter.
// Note that you need to call Chapter.Unwrap() before calling this method if this Chapter
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Chapter) Update() *ChapterUpdateOne {
	return NewChapterClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Chapter entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Chapter) Unwrap() *Chapter {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Chapter is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Chapter) String() string {
	var builder strings.Builder
	builder.WriteString("Chapter(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := c.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("number=")
	builder.WriteString(fmt.Sprintf("%v", c.Number))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(c.Title)
	builder.WriteString(", ")
	builder.WriteString("part_uuid=")
	builder.WriteString(c.PartUUID)
	builder.WriteString(", ")
	if v := c.ReleaseUUID; v != nil {
		builder.WriteString("release_uuid=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// Chapters is a parsable slice of Chapter.
type Chapters []*Chapter
