// Code generated by ent, DO NOT EDIT.

package part

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the part type in the database.
	Label = "part"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "uuid"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldNumber holds the string denoting the number field in the database.
	FieldNumber = "number"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldAnnotation holds the string denoting the annotation field in the database.
	FieldAnnotation = "annotation"
	// FieldReleaseUUID holds the string denoting the release_uuid field in the database.
	FieldReleaseUUID = "release_uuid"
	// EdgeChapters holds the string denoting the chapters edge name in mutations.
	EdgeChapters = "chapters"
	// EdgeRelease holds the string denoting the release edge name in mutations.
	EdgeRelease = "release"
	// Table holds the table name of the part in the database.
	Table = "parts"
	// ChaptersTable is the table that holds the chapters relation/edge.
	ChaptersTable = "chapters"
	// ChaptersInverseTable is the table name for the Chapter entity.
	// It exists in this package in order to avoid circular dependency with the "chapter" package.
	ChaptersInverseTable = "chapters"
	// ChaptersColumn is the table column denoting the chapters relation/edge.
	ChaptersColumn = "part_uuid"
	// ReleaseTable is the table that holds the release relation/edge.
	ReleaseTable = "parts"
	// ReleaseInverseTable is the table name for the Release entity.
	// It exists in this package in order to avoid circular dependency with the "release" package.
	ReleaseInverseTable = "releases"
	// ReleaseColumn is the table column denoting the release relation/edge.
	ReleaseColumn = "release_uuid"
)

// Columns holds all SQL columns for part fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldNumber,
	FieldTitle,
	FieldAnnotation,
	FieldReleaseUUID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "waterfall-backend/internal/modules/stores/db/ent/runtime"
var (
	Hooks        [2]ent.Hook
	Interceptors [1]ent.Interceptor
	Policy       ent.Policy
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// NumberValidator is a validator for the "number" field. It is called by the builders before save.
	NumberValidator func(int) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// Order defines the ordering method for the Part queries.
type Order func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByNumber orders the results by the number field.
func ByNumber(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldNumber, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByAnnotation orders the results by the annotation field.
func ByAnnotation(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldAnnotation, opts...).ToFunc()
}

// ByReleaseUUID orders the results by the release_uuid field.
func ByReleaseUUID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldReleaseUUID, opts...).ToFunc()
}

// ByChaptersCount orders the results by chapters count.
func ByChaptersCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newChaptersStep(), opts...)
	}
}

// ByChapters orders the results by chapters terms.
func ByChapters(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChaptersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByReleaseField orders the results by release field.
func ByReleaseField(field string, opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReleaseStep(), sql.OrderByField(field, opts...))
	}
}
func newChaptersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ChaptersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ChaptersTable, ChaptersColumn),
	)
}
func newReleaseStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReleaseInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ReleaseTable, ReleaseColumn),
	)
}
