// Code generated by ent, DO NOT EDIT.

package part

import (
	"time"
	"waterfall-backend/internal/modules/stores/db/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Part {
	return predicate.Part(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Part {
	return predicate.Part(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Part {
	return predicate.Part(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Part {
	return predicate.Part(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Part {
	return predicate.Part(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Part {
	return predicate.Part(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Part {
	return predicate.Part(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Part {
	return predicate.Part(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Part {
	return predicate.Part(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Part {
	return predicate.Part(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Part {
	return predicate.Part(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Part {
	return predicate.Part(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Part {
	return predicate.Part(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Part {
	return predicate.Part(sql.FieldEQ(FieldDeletedAt, v))
}

// Number applies equality check predicate on the "number" field. It's identical to NumberEQ.
func Number(v int) predicate.Part {
	return predicate.Part(sql.FieldEQ(FieldNumber, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Part {
	return predicate.Part(sql.FieldEQ(FieldTitle, v))
}

// Annotation applies equality check predicate on the "annotation" field. It's identical to AnnotationEQ.
func Annotation(v string) predicate.Part {
	return predicate.Part(sql.FieldEQ(FieldAnnotation, v))
}

// ReleaseUUID applies equality check predicate on the "release_uuid" field. It's identical to ReleaseUUIDEQ.
func ReleaseUUID(v string) predicate.Part {
	return predicate.Part(sql.FieldEQ(FieldReleaseUUID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Part {
	return predicate.Part(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Part {
	return predicate.Part(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Part {
	return predicate.Part(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Part {
	return predicate.Part(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Part {
	return predicate.Part(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Part {
	return predicate.Part(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Part {
	return predicate.Part(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Part {
	return predicate.Part(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Part {
	return predicate.Part(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Part {
	return predicate.Part(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Part {
	return predicate.Part(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Part {
	return predicate.Part(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Part {
	return predicate.Part(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Part {
	return predicate.Part(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Part {
	return predicate.Part(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Part {
	return predicate.Part(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Part {
	return predicate.Part(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Part {
	return predicate.Part(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Part {
	return predicate.Part(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Part {
	return predicate.Part(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Part {
	return predicate.Part(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Part {
	return predicate.Part(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Part {
	return predicate.Part(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Part {
	return predicate.Part(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Part {
	return predicate.Part(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Part {
	return predicate.Part(sql.FieldNotNull(FieldDeletedAt))
}

// NumberEQ applies the EQ predicate on the "number" field.
func NumberEQ(v int) predicate.Part {
	return predicate.Part(sql.FieldEQ(FieldNumber, v))
}

// NumberNEQ applies the NEQ predicate on the "number" field.
func NumberNEQ(v int) predicate.Part {
	return predicate.Part(sql.FieldNEQ(FieldNumber, v))
}

// NumberIn applies the In predicate on the "number" field.
func NumberIn(vs ...int) predicate.Part {
	return predicate.Part(sql.FieldIn(FieldNumber, vs...))
}

// NumberNotIn applies the NotIn predicate on the "number" field.
func NumberNotIn(vs ...int) predicate.Part {
	return predicate.Part(sql.FieldNotIn(FieldNumber, vs...))
}

// NumberGT applies the GT predicate on the "number" field.
func NumberGT(v int) predicate.Part {
	return predicate.Part(sql.FieldGT(FieldNumber, v))
}

// NumberGTE applies the GTE predicate on the "number" field.
func NumberGTE(v int) predicate.Part {
	return predicate.Part(sql.FieldGTE(FieldNumber, v))
}

// NumberLT applies the LT predicate on the "number" field.
func NumberLT(v int) predicate.Part {
	return predicate.Part(sql.FieldLT(FieldNumber, v))
}

// NumberLTE applies the LTE predicate on the "number" field.
func NumberLTE(v int) predicate.Part {
	return predicate.Part(sql.FieldLTE(FieldNumber, v))
}

// NumberIsNil applies the IsNil predicate on the "number" field.
func NumberIsNil() predicate.Part {
	return predicate.Part(sql.FieldIsNull(FieldNumber))
}

// NumberNotNil applies the NotNil predicate on the "number" field.
func NumberNotNil() predicate.Part {
	return predicate.Part(sql.FieldNotNull(FieldNumber))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Part {
	return predicate.Part(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Part {
	return predicate.Part(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Part {
	return predicate.Part(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Part {
	return predicate.Part(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Part {
	return predicate.Part(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Part {
	return predicate.Part(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Part {
	return predicate.Part(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Part {
	return predicate.Part(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Part {
	return predicate.Part(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Part {
	return predicate.Part(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Part {
	return predicate.Part(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Part {
	return predicate.Part(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Part {
	return predicate.Part(sql.FieldContainsFold(FieldTitle, v))
}

// AnnotationEQ applies the EQ predicate on the "annotation" field.
func AnnotationEQ(v string) predicate.Part {
	return predicate.Part(sql.FieldEQ(FieldAnnotation, v))
}

// AnnotationNEQ applies the NEQ predicate on the "annotation" field.
func AnnotationNEQ(v string) predicate.Part {
	return predicate.Part(sql.FieldNEQ(FieldAnnotation, v))
}

// AnnotationIn applies the In predicate on the "annotation" field.
func AnnotationIn(vs ...string) predicate.Part {
	return predicate.Part(sql.FieldIn(FieldAnnotation, vs...))
}

// AnnotationNotIn applies the NotIn predicate on the "annotation" field.
func AnnotationNotIn(vs ...string) predicate.Part {
	return predicate.Part(sql.FieldNotIn(FieldAnnotation, vs...))
}

// AnnotationGT applies the GT predicate on the "annotation" field.
func AnnotationGT(v string) predicate.Part {
	return predicate.Part(sql.FieldGT(FieldAnnotation, v))
}

// AnnotationGTE applies the GTE predicate on the "annotation" field.
func AnnotationGTE(v string) predicate.Part {
	return predicate.Part(sql.FieldGTE(FieldAnnotation, v))
}

// AnnotationLT applies the LT predicate on the "annotation" field.
func AnnotationLT(v string) predicate.Part {
	return predicate.Part(sql.FieldLT(FieldAnnotation, v))
}

// AnnotationLTE applies the LTE predicate on the "annotation" field.
func AnnotationLTE(v string) predicate.Part {
	return predicate.Part(sql.FieldLTE(FieldAnnotation, v))
}

// AnnotationContains applies the Contains predicate on the "annotation" field.
func AnnotationContains(v string) predicate.Part {
	return predicate.Part(sql.FieldContains(FieldAnnotation, v))
}

// AnnotationHasPrefix applies the HasPrefix predicate on the "annotation" field.
func AnnotationHasPrefix(v string) predicate.Part {
	return predicate.Part(sql.FieldHasPrefix(FieldAnnotation, v))
}

// AnnotationHasSuffix applies the HasSuffix predicate on the "annotation" field.
func AnnotationHasSuffix(v string) predicate.Part {
	return predicate.Part(sql.FieldHasSuffix(FieldAnnotation, v))
}

// AnnotationIsNil applies the IsNil predicate on the "annotation" field.
func AnnotationIsNil() predicate.Part {
	return predicate.Part(sql.FieldIsNull(FieldAnnotation))
}

// AnnotationNotNil applies the NotNil predicate on the "annotation" field.
func AnnotationNotNil() predicate.Part {
	return predicate.Part(sql.FieldNotNull(FieldAnnotation))
}

// AnnotationEqualFold applies the EqualFold predicate on the "annotation" field.
func AnnotationEqualFold(v string) predicate.Part {
	return predicate.Part(sql.FieldEqualFold(FieldAnnotation, v))
}

// AnnotationContainsFold applies the ContainsFold predicate on the "annotation" field.
func AnnotationContainsFold(v string) predicate.Part {
	return predicate.Part(sql.FieldContainsFold(FieldAnnotation, v))
}

// ReleaseUUIDEQ applies the EQ predicate on the "release_uuid" field.
func ReleaseUUIDEQ(v string) predicate.Part {
	return predicate.Part(sql.FieldEQ(FieldReleaseUUID, v))
}

// ReleaseUUIDNEQ applies the NEQ predicate on the "release_uuid" field.
func ReleaseUUIDNEQ(v string) predicate.Part {
	return predicate.Part(sql.FieldNEQ(FieldReleaseUUID, v))
}

// ReleaseUUIDIn applies the In predicate on the "release_uuid" field.
func ReleaseUUIDIn(vs ...string) predicate.Part {
	return predicate.Part(sql.FieldIn(FieldReleaseUUID, vs...))
}

// ReleaseUUIDNotIn applies the NotIn predicate on the "release_uuid" field.
func ReleaseUUIDNotIn(vs ...string) predicate.Part {
	return predicate.Part(sql.FieldNotIn(FieldReleaseUUID, vs...))
}

// ReleaseUUIDGT applies the GT predicate on the "release_uuid" field.
func ReleaseUUIDGT(v string) predicate.Part {
	return predicate.Part(sql.FieldGT(FieldReleaseUUID, v))
}

// ReleaseUUIDGTE applies the GTE predicate on the "release_uuid" field.
func ReleaseUUIDGTE(v string) predicate.Part {
	return predicate.Part(sql.FieldGTE(FieldReleaseUUID, v))
}

// ReleaseUUIDLT applies the LT predicate on the "release_uuid" field.
func ReleaseUUIDLT(v string) predicate.Part {
	return predicate.Part(sql.FieldLT(FieldReleaseUUID, v))
}

// ReleaseUUIDLTE applies the LTE predicate on the "release_uuid" field.
func ReleaseUUIDLTE(v string) predicate.Part {
	return predicate.Part(sql.FieldLTE(FieldReleaseUUID, v))
}

// ReleaseUUIDContains applies the Contains predicate on the "release_uuid" field.
func ReleaseUUIDContains(v string) predicate.Part {
	return predicate.Part(sql.FieldContains(FieldReleaseUUID, v))
}

// ReleaseUUIDHasPrefix applies the HasPrefix predicate on the "release_uuid" field.
func ReleaseUUIDHasPrefix(v string) predicate.Part {
	return predicate.Part(sql.FieldHasPrefix(FieldReleaseUUID, v))
}

// ReleaseUUIDHasSuffix applies the HasSuffix predicate on the "release_uuid" field.
func ReleaseUUIDHasSuffix(v string) predicate.Part {
	return predicate.Part(sql.FieldHasSuffix(FieldReleaseUUID, v))
}

// ReleaseUUIDIsNil applies the IsNil predicate on the "release_uuid" field.
func ReleaseUUIDIsNil() predicate.Part {
	return predicate.Part(sql.FieldIsNull(FieldReleaseUUID))
}

// ReleaseUUIDNotNil applies the NotNil predicate on the "release_uuid" field.
func ReleaseUUIDNotNil() predicate.Part {
	return predicate.Part(sql.FieldNotNull(FieldReleaseUUID))
}

// ReleaseUUIDEqualFold applies the EqualFold predicate on the "release_uuid" field.
func ReleaseUUIDEqualFold(v string) predicate.Part {
	return predicate.Part(sql.FieldEqualFold(FieldReleaseUUID, v))
}

// ReleaseUUIDContainsFold applies the ContainsFold predicate on the "release_uuid" field.
func ReleaseUUIDContainsFold(v string) predicate.Part {
	return predicate.Part(sql.FieldContainsFold(FieldReleaseUUID, v))
}

// HasChapters applies the HasEdge predicate on the "chapters" edge.
func HasChapters() predicate.Part {
	return predicate.Part(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChaptersTable, ChaptersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChaptersWith applies the HasEdge predicate on the "chapters" edge with a given conditions (other predicates).
func HasChaptersWith(preds ...predicate.Chapter) predicate.Part {
	return predicate.Part(func(s *sql.Selector) {
		step := newChaptersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRelease applies the HasEdge predicate on the "release" edge.
func HasRelease() predicate.Part {
	return predicate.Part(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ReleaseTable, ReleaseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReleaseWith applies the HasEdge predicate on the "release" edge with a given conditions (other predicates).
func HasReleaseWith(preds ...predicate.Release) predicate.Part {
	return predicate.Part(func(s *sql.Selector) {
		step := newReleaseStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Part) predicate.Part {
	return predicate.Part(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Part) predicate.Part {
	return predicate.Part(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Part) predicate.Part {
	return predicate.Part(func(s *sql.Selector) {
		p(s.Not())
	})
}
