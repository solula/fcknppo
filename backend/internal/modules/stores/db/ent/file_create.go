// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"waterfall-backend/internal/models"
	"waterfall-backend/internal/models/files"
	"waterfall-backend/internal/modules/stores/db/ent/file"
	"waterfall-backend/internal/modules/stores/db/ent/user"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FileCreate is the builder for creating a File entity.
type FileCreate struct {
	config
	mutation *FileMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (fc *FileCreate) SetCreatedAt(t time.Time) *FileCreate {
	fc.mutation.SetCreatedAt(t)
	return fc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fc *FileCreate) SetNillableCreatedAt(t *time.Time) *FileCreate {
	if t != nil {
		fc.SetCreatedAt(*t)
	}
	return fc
}

// SetUpdatedAt sets the "updated_at" field.
func (fc *FileCreate) SetUpdatedAt(t time.Time) *FileCreate {
	fc.mutation.SetUpdatedAt(t)
	return fc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fc *FileCreate) SetNillableUpdatedAt(t *time.Time) *FileCreate {
	if t != nil {
		fc.SetUpdatedAt(*t)
	}
	return fc
}

// SetFilename sets the "filename" field.
func (fc *FileCreate) SetFilename(s string) *FileCreate {
	fc.mutation.SetFilename(s)
	return fc
}

// SetMimeType sets the "mime_type" field.
func (fc *FileCreate) SetMimeType(s string) *FileCreate {
	fc.mutation.SetMimeType(s)
	return fc
}

// SetDescription sets the "description" field.
func (fc *FileCreate) SetDescription(s string) *FileCreate {
	fc.mutation.SetDescription(s)
	return fc
}

// SetCreatorUUID sets the "creator_uuid" field.
func (fc *FileCreate) SetCreatorUUID(s string) *FileCreate {
	fc.mutation.SetCreatorUUID(s)
	return fc
}

// SetNillableCreatorUUID sets the "creator_uuid" field if the given value is not nil.
func (fc *FileCreate) SetNillableCreatorUUID(s *string) *FileCreate {
	if s != nil {
		fc.SetCreatorUUID(*s)
	}
	return fc
}

// SetObjectType sets the "object_type" field.
func (fc *FileCreate) SetObjectType(mt models.ObjectType) *FileCreate {
	fc.mutation.SetObjectType(mt)
	return fc
}

// SetObjectRef sets the "object_ref" field.
func (fc *FileCreate) SetObjectRef(s string) *FileCreate {
	fc.mutation.SetObjectRef(s)
	return fc
}

// SetType sets the "type" field.
func (fc *FileCreate) SetType(f files.Type) *FileCreate {
	fc.mutation.SetType(f)
	return fc
}

// SetTemp sets the "temp" field.
func (fc *FileCreate) SetTemp(b bool) *FileCreate {
	fc.mutation.SetTemp(b)
	return fc
}

// SetSequenceNumber sets the "sequence_number" field.
func (fc *FileCreate) SetSequenceNumber(u uint) *FileCreate {
	fc.mutation.SetSequenceNumber(u)
	return fc
}

// SetNillableSequenceNumber sets the "sequence_number" field if the given value is not nil.
func (fc *FileCreate) SetNillableSequenceNumber(u *uint) *FileCreate {
	if u != nil {
		fc.SetSequenceNumber(*u)
	}
	return fc
}

// SetID sets the "id" field.
func (fc *FileCreate) SetID(s string) *FileCreate {
	fc.mutation.SetID(s)
	return fc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (fc *FileCreate) SetNillableID(s *string) *FileCreate {
	if s != nil {
		fc.SetID(*s)
	}
	return fc
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (fc *FileCreate) SetCreatorID(id string) *FileCreate {
	fc.mutation.SetCreatorID(id)
	return fc
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (fc *FileCreate) SetNillableCreatorID(id *string) *FileCreate {
	if id != nil {
		fc = fc.SetCreatorID(*id)
	}
	return fc
}

// SetCreator sets the "creator" edge to the User entity.
func (fc *FileCreate) SetCreator(u *User) *FileCreate {
	return fc.SetCreatorID(u.ID)
}

// Mutation returns the FileMutation object of the builder.
func (fc *FileCreate) Mutation() *FileMutation {
	return fc.mutation
}

// Save creates the File in the database.
func (fc *FileCreate) Save(ctx context.Context) (*File, error) {
	if err := fc.defaults(); err != nil {
		return nil, err
	}
	return withHooks[*File, FileMutation](ctx, fc.sqlSave, fc.mutation, fc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FileCreate) SaveX(ctx context.Context) *File {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fc *FileCreate) Exec(ctx context.Context) error {
	_, err := fc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fc *FileCreate) ExecX(ctx context.Context) {
	if err := fc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fc *FileCreate) defaults() error {
	if _, ok := fc.mutation.CreatedAt(); !ok {
		if file.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized file.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := file.DefaultCreatedAt()
		fc.mutation.SetCreatedAt(v)
	}
	if _, ok := fc.mutation.UpdatedAt(); !ok {
		if file.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized file.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := file.DefaultUpdatedAt()
		fc.mutation.SetUpdatedAt(v)
	}
	if _, ok := fc.mutation.ID(); !ok {
		if file.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized file.DefaultID (forgotten import ent/runtime?)")
		}
		v := file.DefaultID()
		fc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (fc *FileCreate) check() error {
	if _, ok := fc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "File.created_at"`)}
	}
	if _, ok := fc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "File.updated_at"`)}
	}
	if _, ok := fc.mutation.Filename(); !ok {
		return &ValidationError{Name: "filename", err: errors.New(`ent: missing required field "File.filename"`)}
	}
	if _, ok := fc.mutation.MimeType(); !ok {
		return &ValidationError{Name: "mime_type", err: errors.New(`ent: missing required field "File.mime_type"`)}
	}
	if _, ok := fc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "File.description"`)}
	}
	if _, ok := fc.mutation.ObjectType(); !ok {
		return &ValidationError{Name: "object_type", err: errors.New(`ent: missing required field "File.object_type"`)}
	}
	if v, ok := fc.mutation.ObjectType(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "object_type", err: fmt.Errorf(`ent: validator failed for field "File.object_type": %w`, err)}
		}
	}
	if _, ok := fc.mutation.ObjectRef(); !ok {
		return &ValidationError{Name: "object_ref", err: errors.New(`ent: missing required field "File.object_ref"`)}
	}
	if _, ok := fc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "File.type"`)}
	}
	if v, ok := fc.mutation.GetType(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "File.type": %w`, err)}
		}
	}
	if _, ok := fc.mutation.Temp(); !ok {
		return &ValidationError{Name: "temp", err: errors.New(`ent: missing required field "File.temp"`)}
	}
	return nil
}

func (fc *FileCreate) sqlSave(ctx context.Context) (*File, error) {
	if err := fc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected File.ID type: %T", _spec.ID.Value)
		}
	}
	fc.mutation.id = &_node.ID
	fc.mutation.done = true
	return _node, nil
}

func (fc *FileCreate) createSpec() (*File, *sqlgraph.CreateSpec) {
	var (
		_node = &File{config: fc.config}
		_spec = sqlgraph.NewCreateSpec(file.Table, sqlgraph.NewFieldSpec(file.FieldID, field.TypeString))
	)
	_spec.OnConflict = fc.conflict
	if id, ok := fc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fc.mutation.CreatedAt(); ok {
		_spec.SetField(file.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := fc.mutation.UpdatedAt(); ok {
		_spec.SetField(file.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := fc.mutation.Filename(); ok {
		_spec.SetField(file.FieldFilename, field.TypeString, value)
		_node.Filename = value
	}
	if value, ok := fc.mutation.MimeType(); ok {
		_spec.SetField(file.FieldMimeType, field.TypeString, value)
		_node.MimeType = value
	}
	if value, ok := fc.mutation.Description(); ok {
		_spec.SetField(file.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := fc.mutation.ObjectType(); ok {
		_spec.SetField(file.FieldObjectType, field.TypeString, value)
		_node.ObjectType = value
	}
	if value, ok := fc.mutation.ObjectRef(); ok {
		_spec.SetField(file.FieldObjectRef, field.TypeString, value)
		_node.ObjectRef = value
	}
	if value, ok := fc.mutation.GetType(); ok {
		_spec.SetField(file.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := fc.mutation.Temp(); ok {
		_spec.SetField(file.FieldTemp, field.TypeBool, value)
		_node.Temp = value
	}
	if value, ok := fc.mutation.SequenceNumber(); ok {
		_spec.SetField(file.FieldSequenceNumber, field.TypeUint, value)
		_node.SequenceNumber = &value
	}
	if nodes := fc.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   file.CreatorTable,
			Columns: []string{file.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreatorUUID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.File.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FileUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (fc *FileCreate) OnConflict(opts ...sql.ConflictOption) *FileUpsertOne {
	fc.conflict = opts
	return &FileUpsertOne{
		create: fc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.File.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fc *FileCreate) OnConflictColumns(columns ...string) *FileUpsertOne {
	fc.conflict = append(fc.conflict, sql.ConflictColumns(columns...))
	return &FileUpsertOne{
		create: fc,
	}
}

type (
	// FileUpsertOne is the builder for "upsert"-ing
	//  one File node.
	FileUpsertOne struct {
		create *FileCreate
	}

	// FileUpsert is the "OnConflict" setter.
	FileUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *FileUpsert) SetUpdatedAt(v time.Time) *FileUpsert {
	u.Set(file.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FileUpsert) UpdateUpdatedAt() *FileUpsert {
	u.SetExcluded(file.FieldUpdatedAt)
	return u
}

// SetFilename sets the "filename" field.
func (u *FileUpsert) SetFilename(v string) *FileUpsert {
	u.Set(file.FieldFilename, v)
	return u
}

// UpdateFilename sets the "filename" field to the value that was provided on create.
func (u *FileUpsert) UpdateFilename() *FileUpsert {
	u.SetExcluded(file.FieldFilename)
	return u
}

// SetMimeType sets the "mime_type" field.
func (u *FileUpsert) SetMimeType(v string) *FileUpsert {
	u.Set(file.FieldMimeType, v)
	return u
}

// UpdateMimeType sets the "mime_type" field to the value that was provided on create.
func (u *FileUpsert) UpdateMimeType() *FileUpsert {
	u.SetExcluded(file.FieldMimeType)
	return u
}

// SetDescription sets the "description" field.
func (u *FileUpsert) SetDescription(v string) *FileUpsert {
	u.Set(file.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *FileUpsert) UpdateDescription() *FileUpsert {
	u.SetExcluded(file.FieldDescription)
	return u
}

// SetCreatorUUID sets the "creator_uuid" field.
func (u *FileUpsert) SetCreatorUUID(v string) *FileUpsert {
	u.Set(file.FieldCreatorUUID, v)
	return u
}

// UpdateCreatorUUID sets the "creator_uuid" field to the value that was provided on create.
func (u *FileUpsert) UpdateCreatorUUID() *FileUpsert {
	u.SetExcluded(file.FieldCreatorUUID)
	return u
}

// ClearCreatorUUID clears the value of the "creator_uuid" field.
func (u *FileUpsert) ClearCreatorUUID() *FileUpsert {
	u.SetNull(file.FieldCreatorUUID)
	return u
}

// SetObjectType sets the "object_type" field.
func (u *FileUpsert) SetObjectType(v models.ObjectType) *FileUpsert {
	u.Set(file.FieldObjectType, v)
	return u
}

// UpdateObjectType sets the "object_type" field to the value that was provided on create.
func (u *FileUpsert) UpdateObjectType() *FileUpsert {
	u.SetExcluded(file.FieldObjectType)
	return u
}

// SetObjectRef sets the "object_ref" field.
func (u *FileUpsert) SetObjectRef(v string) *FileUpsert {
	u.Set(file.FieldObjectRef, v)
	return u
}

// UpdateObjectRef sets the "object_ref" field to the value that was provided on create.
func (u *FileUpsert) UpdateObjectRef() *FileUpsert {
	u.SetExcluded(file.FieldObjectRef)
	return u
}

// SetType sets the "type" field.
func (u *FileUpsert) SetType(v files.Type) *FileUpsert {
	u.Set(file.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *FileUpsert) UpdateType() *FileUpsert {
	u.SetExcluded(file.FieldType)
	return u
}

// SetTemp sets the "temp" field.
func (u *FileUpsert) SetTemp(v bool) *FileUpsert {
	u.Set(file.FieldTemp, v)
	return u
}

// UpdateTemp sets the "temp" field to the value that was provided on create.
func (u *FileUpsert) UpdateTemp() *FileUpsert {
	u.SetExcluded(file.FieldTemp)
	return u
}

// SetSequenceNumber sets the "sequence_number" field.
func (u *FileUpsert) SetSequenceNumber(v uint) *FileUpsert {
	u.Set(file.FieldSequenceNumber, v)
	return u
}

// UpdateSequenceNumber sets the "sequence_number" field to the value that was provided on create.
func (u *FileUpsert) UpdateSequenceNumber() *FileUpsert {
	u.SetExcluded(file.FieldSequenceNumber)
	return u
}

// AddSequenceNumber adds v to the "sequence_number" field.
func (u *FileUpsert) AddSequenceNumber(v uint) *FileUpsert {
	u.Add(file.FieldSequenceNumber, v)
	return u
}

// ClearSequenceNumber clears the value of the "sequence_number" field.
func (u *FileUpsert) ClearSequenceNumber() *FileUpsert {
	u.SetNull(file.FieldSequenceNumber)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.File.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(file.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *FileUpsertOne) UpdateNewValues() *FileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(file.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(file.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.File.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *FileUpsertOne) Ignore() *FileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FileUpsertOne) DoNothing() *FileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FileCreate.OnConflict
// documentation for more info.
func (u *FileUpsertOne) Update(set func(*FileUpsert)) *FileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FileUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FileUpsertOne) SetUpdatedAt(v time.Time) *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FileUpsertOne) UpdateUpdatedAt() *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetFilename sets the "filename" field.
func (u *FileUpsertOne) SetFilename(v string) *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.SetFilename(v)
	})
}

// UpdateFilename sets the "filename" field to the value that was provided on create.
func (u *FileUpsertOne) UpdateFilename() *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.UpdateFilename()
	})
}

// SetMimeType sets the "mime_type" field.
func (u *FileUpsertOne) SetMimeType(v string) *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.SetMimeType(v)
	})
}

// UpdateMimeType sets the "mime_type" field to the value that was provided on create.
func (u *FileUpsertOne) UpdateMimeType() *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.UpdateMimeType()
	})
}

// SetDescription sets the "description" field.
func (u *FileUpsertOne) SetDescription(v string) *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *FileUpsertOne) UpdateDescription() *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.UpdateDescription()
	})
}

// SetCreatorUUID sets the "creator_uuid" field.
func (u *FileUpsertOne) SetCreatorUUID(v string) *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.SetCreatorUUID(v)
	})
}

// UpdateCreatorUUID sets the "creator_uuid" field to the value that was provided on create.
func (u *FileUpsertOne) UpdateCreatorUUID() *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.UpdateCreatorUUID()
	})
}

// ClearCreatorUUID clears the value of the "creator_uuid" field.
func (u *FileUpsertOne) ClearCreatorUUID() *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.ClearCreatorUUID()
	})
}

// SetObjectType sets the "object_type" field.
func (u *FileUpsertOne) SetObjectType(v models.ObjectType) *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.SetObjectType(v)
	})
}

// UpdateObjectType sets the "object_type" field to the value that was provided on create.
func (u *FileUpsertOne) UpdateObjectType() *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.UpdateObjectType()
	})
}

// SetObjectRef sets the "object_ref" field.
func (u *FileUpsertOne) SetObjectRef(v string) *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.SetObjectRef(v)
	})
}

// UpdateObjectRef sets the "object_ref" field to the value that was provided on create.
func (u *FileUpsertOne) UpdateObjectRef() *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.UpdateObjectRef()
	})
}

// SetType sets the "type" field.
func (u *FileUpsertOne) SetType(v files.Type) *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *FileUpsertOne) UpdateType() *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.UpdateType()
	})
}

// SetTemp sets the "temp" field.
func (u *FileUpsertOne) SetTemp(v bool) *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.SetTemp(v)
	})
}

// UpdateTemp sets the "temp" field to the value that was provided on create.
func (u *FileUpsertOne) UpdateTemp() *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.UpdateTemp()
	})
}

// SetSequenceNumber sets the "sequence_number" field.
func (u *FileUpsertOne) SetSequenceNumber(v uint) *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.SetSequenceNumber(v)
	})
}

// AddSequenceNumber adds v to the "sequence_number" field.
func (u *FileUpsertOne) AddSequenceNumber(v uint) *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.AddSequenceNumber(v)
	})
}

// UpdateSequenceNumber sets the "sequence_number" field to the value that was provided on create.
func (u *FileUpsertOne) UpdateSequenceNumber() *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.UpdateSequenceNumber()
	})
}

// ClearSequenceNumber clears the value of the "sequence_number" field.
func (u *FileUpsertOne) ClearSequenceNumber() *FileUpsertOne {
	return u.Update(func(s *FileUpsert) {
		s.ClearSequenceNumber()
	})
}

// Exec executes the query.
func (u *FileUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FileCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FileUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *FileUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: FileUpsertOne.ID is not supported by MySQL driver. Use FileUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *FileUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// FileCreateBulk is the builder for creating many File entities in bulk.
type FileCreateBulk struct {
	config
	builders []*FileCreate
	conflict []sql.ConflictOption
}

// Save creates the File entities in the database.
func (fcb *FileCreateBulk) Save(ctx context.Context) ([]*File, error) {
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*File, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = fcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcb *FileCreateBulk) SaveX(ctx context.Context) []*File {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcb *FileCreateBulk) Exec(ctx context.Context) error {
	_, err := fcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcb *FileCreateBulk) ExecX(ctx context.Context) {
	if err := fcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.File.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FileUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (fcb *FileCreateBulk) OnConflict(opts ...sql.ConflictOption) *FileUpsertBulk {
	fcb.conflict = opts
	return &FileUpsertBulk{
		create: fcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.File.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fcb *FileCreateBulk) OnConflictColumns(columns ...string) *FileUpsertBulk {
	fcb.conflict = append(fcb.conflict, sql.ConflictColumns(columns...))
	return &FileUpsertBulk{
		create: fcb,
	}
}

// FileUpsertBulk is the builder for "upsert"-ing
// a bulk of File nodes.
type FileUpsertBulk struct {
	create *FileCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.File.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(file.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *FileUpsertBulk) UpdateNewValues() *FileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(file.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(file.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.File.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *FileUpsertBulk) Ignore() *FileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FileUpsertBulk) DoNothing() *FileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FileCreateBulk.OnConflict
// documentation for more info.
func (u *FileUpsertBulk) Update(set func(*FileUpsert)) *FileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FileUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FileUpsertBulk) SetUpdatedAt(v time.Time) *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FileUpsertBulk) UpdateUpdatedAt() *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetFilename sets the "filename" field.
func (u *FileUpsertBulk) SetFilename(v string) *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.SetFilename(v)
	})
}

// UpdateFilename sets the "filename" field to the value that was provided on create.
func (u *FileUpsertBulk) UpdateFilename() *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.UpdateFilename()
	})
}

// SetMimeType sets the "mime_type" field.
func (u *FileUpsertBulk) SetMimeType(v string) *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.SetMimeType(v)
	})
}

// UpdateMimeType sets the "mime_type" field to the value that was provided on create.
func (u *FileUpsertBulk) UpdateMimeType() *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.UpdateMimeType()
	})
}

// SetDescription sets the "description" field.
func (u *FileUpsertBulk) SetDescription(v string) *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *FileUpsertBulk) UpdateDescription() *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.UpdateDescription()
	})
}

// SetCreatorUUID sets the "creator_uuid" field.
func (u *FileUpsertBulk) SetCreatorUUID(v string) *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.SetCreatorUUID(v)
	})
}

// UpdateCreatorUUID sets the "creator_uuid" field to the value that was provided on create.
func (u *FileUpsertBulk) UpdateCreatorUUID() *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.UpdateCreatorUUID()
	})
}

// ClearCreatorUUID clears the value of the "creator_uuid" field.
func (u *FileUpsertBulk) ClearCreatorUUID() *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.ClearCreatorUUID()
	})
}

// SetObjectType sets the "object_type" field.
func (u *FileUpsertBulk) SetObjectType(v models.ObjectType) *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.SetObjectType(v)
	})
}

// UpdateObjectType sets the "object_type" field to the value that was provided on create.
func (u *FileUpsertBulk) UpdateObjectType() *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.UpdateObjectType()
	})
}

// SetObjectRef sets the "object_ref" field.
func (u *FileUpsertBulk) SetObjectRef(v string) *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.SetObjectRef(v)
	})
}

// UpdateObjectRef sets the "object_ref" field to the value that was provided on create.
func (u *FileUpsertBulk) UpdateObjectRef() *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.UpdateObjectRef()
	})
}

// SetType sets the "type" field.
func (u *FileUpsertBulk) SetType(v files.Type) *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *FileUpsertBulk) UpdateType() *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.UpdateType()
	})
}

// SetTemp sets the "temp" field.
func (u *FileUpsertBulk) SetTemp(v bool) *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.SetTemp(v)
	})
}

// UpdateTemp sets the "temp" field to the value that was provided on create.
func (u *FileUpsertBulk) UpdateTemp() *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.UpdateTemp()
	})
}

// SetSequenceNumber sets the "sequence_number" field.
func (u *FileUpsertBulk) SetSequenceNumber(v uint) *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.SetSequenceNumber(v)
	})
}

// AddSequenceNumber adds v to the "sequence_number" field.
func (u *FileUpsertBulk) AddSequenceNumber(v uint) *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.AddSequenceNumber(v)
	})
}

// UpdateSequenceNumber sets the "sequence_number" field to the value that was provided on create.
func (u *FileUpsertBulk) UpdateSequenceNumber() *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.UpdateSequenceNumber()
	})
}

// ClearSequenceNumber clears the value of the "sequence_number" field.
func (u *FileUpsertBulk) ClearSequenceNumber() *FileUpsertBulk {
	return u.Update(func(s *FileUpsert) {
		s.ClearSequenceNumber()
	})
}

// Exec executes the query.
func (u *FileUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the FileCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FileCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FileUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
