// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"waterfall-backend/internal/modules/stores/db/ent/chapter"
	"waterfall-backend/internal/modules/stores/db/ent/chaptertext"
	"waterfall-backend/internal/modules/stores/db/ent/comment"
	"waterfall-backend/internal/modules/stores/db/ent/part"
	"waterfall-backend/internal/modules/stores/db/ent/predicate"
	"waterfall-backend/internal/modules/stores/db/ent/release"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ChapterUpdate is the builder for updating Chapter entities.
type ChapterUpdate struct {
	config
	hooks     []Hook
	mutation  *ChapterMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ChapterUpdate builder.
func (cu *ChapterUpdate) Where(ps ...predicate.Chapter) *ChapterUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *ChapterUpdate) SetUpdatedAt(t time.Time) *ChapterUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetDeletedAt sets the "deleted_at" field.
func (cu *ChapterUpdate) SetDeletedAt(t time.Time) *ChapterUpdate {
	cu.mutation.SetDeletedAt(t)
	return cu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cu *ChapterUpdate) SetNillableDeletedAt(t *time.Time) *ChapterUpdate {
	if t != nil {
		cu.SetDeletedAt(*t)
	}
	return cu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cu *ChapterUpdate) ClearDeletedAt() *ChapterUpdate {
	cu.mutation.ClearDeletedAt()
	return cu
}

// SetNumber sets the "number" field.
func (cu *ChapterUpdate) SetNumber(i int) *ChapterUpdate {
	cu.mutation.ResetNumber()
	cu.mutation.SetNumber(i)
	return cu
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (cu *ChapterUpdate) SetNillableNumber(i *int) *ChapterUpdate {
	if i != nil {
		cu.SetNumber(*i)
	}
	return cu
}

// AddNumber adds i to the "number" field.
func (cu *ChapterUpdate) AddNumber(i int) *ChapterUpdate {
	cu.mutation.AddNumber(i)
	return cu
}

// ClearNumber clears the value of the "number" field.
func (cu *ChapterUpdate) ClearNumber() *ChapterUpdate {
	cu.mutation.ClearNumber()
	return cu
}

// SetTitle sets the "title" field.
func (cu *ChapterUpdate) SetTitle(s string) *ChapterUpdate {
	cu.mutation.SetTitle(s)
	return cu
}

// SetPartUUID sets the "part_uuid" field.
func (cu *ChapterUpdate) SetPartUUID(s string) *ChapterUpdate {
	cu.mutation.SetPartUUID(s)
	return cu
}

// SetReleaseUUID sets the "release_uuid" field.
func (cu *ChapterUpdate) SetReleaseUUID(s string) *ChapterUpdate {
	cu.mutation.SetReleaseUUID(s)
	return cu
}

// SetNillableReleaseUUID sets the "release_uuid" field if the given value is not nil.
func (cu *ChapterUpdate) SetNillableReleaseUUID(s *string) *ChapterUpdate {
	if s != nil {
		cu.SetReleaseUUID(*s)
	}
	return cu
}

// ClearReleaseUUID clears the value of the "release_uuid" field.
func (cu *ChapterUpdate) ClearReleaseUUID() *ChapterUpdate {
	cu.mutation.ClearReleaseUUID()
	return cu
}

// SetPartID sets the "part" edge to the Part entity by ID.
func (cu *ChapterUpdate) SetPartID(id string) *ChapterUpdate {
	cu.mutation.SetPartID(id)
	return cu
}

// SetPart sets the "part" edge to the Part entity.
func (cu *ChapterUpdate) SetPart(p *Part) *ChapterUpdate {
	return cu.SetPartID(p.ID)
}

// SetReleaseID sets the "release" edge to the Release entity by ID.
func (cu *ChapterUpdate) SetReleaseID(id string) *ChapterUpdate {
	cu.mutation.SetReleaseID(id)
	return cu
}

// SetNillableReleaseID sets the "release" edge to the Release entity by ID if the given value is not nil.
func (cu *ChapterUpdate) SetNillableReleaseID(id *string) *ChapterUpdate {
	if id != nil {
		cu = cu.SetReleaseID(*id)
	}
	return cu
}

// SetRelease sets the "release" edge to the Release entity.
func (cu *ChapterUpdate) SetRelease(r *Release) *ChapterUpdate {
	return cu.SetReleaseID(r.ID)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (cu *ChapterUpdate) AddCommentIDs(ids ...string) *ChapterUpdate {
	cu.mutation.AddCommentIDs(ids...)
	return cu
}

// AddComments adds the "comments" edges to the Comment entity.
func (cu *ChapterUpdate) AddComments(c ...*Comment) *ChapterUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddCommentIDs(ids...)
}

// SetChapterTextID sets the "chapter_text" edge to the ChapterText entity by ID.
func (cu *ChapterUpdate) SetChapterTextID(id string) *ChapterUpdate {
	cu.mutation.SetChapterTextID(id)
	return cu
}

// SetNillableChapterTextID sets the "chapter_text" edge to the ChapterText entity by ID if the given value is not nil.
func (cu *ChapterUpdate) SetNillableChapterTextID(id *string) *ChapterUpdate {
	if id != nil {
		cu = cu.SetChapterTextID(*id)
	}
	return cu
}

// SetChapterText sets the "chapter_text" edge to the ChapterText entity.
func (cu *ChapterUpdate) SetChapterText(c *ChapterText) *ChapterUpdate {
	return cu.SetChapterTextID(c.ID)
}

// Mutation returns the ChapterMutation object of the builder.
func (cu *ChapterUpdate) Mutation() *ChapterMutation {
	return cu.mutation
}

// ClearPart clears the "part" edge to the Part entity.
func (cu *ChapterUpdate) ClearPart() *ChapterUpdate {
	cu.mutation.ClearPart()
	return cu
}

// ClearRelease clears the "release" edge to the Release entity.
func (cu *ChapterUpdate) ClearRelease() *ChapterUpdate {
	cu.mutation.ClearRelease()
	return cu
}

// ClearComments clears all "comments" edges to the Comment entity.
func (cu *ChapterUpdate) ClearComments() *ChapterUpdate {
	cu.mutation.ClearComments()
	return cu
}

// RemoveCommentIDs removes the "comments" edge to Comment entities by IDs.
func (cu *ChapterUpdate) RemoveCommentIDs(ids ...string) *ChapterUpdate {
	cu.mutation.RemoveCommentIDs(ids...)
	return cu
}

// RemoveComments removes "comments" edges to Comment entities.
func (cu *ChapterUpdate) RemoveComments(c ...*Comment) *ChapterUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveCommentIDs(ids...)
}

// ClearChapterText clears the "chapter_text" edge to the ChapterText entity.
func (cu *ChapterUpdate) ClearChapterText() *ChapterUpdate {
	cu.mutation.ClearChapterText()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ChapterUpdate) Save(ctx context.Context) (int, error) {
	if err := cu.defaults(); err != nil {
		return 0, err
	}
	return withHooks[int, ChapterMutation](ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ChapterUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ChapterUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ChapterUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *ChapterUpdate) defaults() error {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		if chapter.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized chapter.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := chapter.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cu *ChapterUpdate) check() error {
	if v, ok := cu.mutation.Number(); ok {
		if err := chapter.NumberValidator(v); err != nil {
			return &ValidationError{Name: "number", err: fmt.Errorf(`ent: validator failed for field "Chapter.number": %w`, err)}
		}
	}
	if _, ok := cu.mutation.PartID(); cu.mutation.PartCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Chapter.part"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cu *ChapterUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ChapterUpdate {
	cu.modifiers = append(cu.modifiers, modifiers...)
	return cu
}

func (cu *ChapterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(chapter.Table, chapter.Columns, sqlgraph.NewFieldSpec(chapter.FieldID, field.TypeString))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(chapter.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.DeletedAt(); ok {
		_spec.SetField(chapter.FieldDeletedAt, field.TypeTime, value)
	}
	if cu.mutation.DeletedAtCleared() {
		_spec.ClearField(chapter.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cu.mutation.Number(); ok {
		_spec.SetField(chapter.FieldNumber, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedNumber(); ok {
		_spec.AddField(chapter.FieldNumber, field.TypeInt, value)
	}
	if cu.mutation.NumberCleared() {
		_spec.ClearField(chapter.FieldNumber, field.TypeInt)
	}
	if value, ok := cu.mutation.Title(); ok {
		_spec.SetField(chapter.FieldTitle, field.TypeString, value)
	}
	if cu.mutation.PartCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chapter.PartTable,
			Columns: []string{chapter.PartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(part.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.PartIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chapter.PartTable,
			Columns: []string{chapter.PartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(part.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ReleaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chapter.ReleaseTable,
			Columns: []string{chapter.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(release.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ReleaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chapter.ReleaseTable,
			Columns: []string{chapter.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(release.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chapter.CommentsTable,
			Columns: []string{chapter.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !cu.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chapter.CommentsTable,
			Columns: []string{chapter.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chapter.CommentsTable,
			Columns: []string{chapter.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ChapterTextCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   chapter.ChapterTextTable,
			Columns: []string{chapter.ChapterTextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chaptertext.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ChapterTextIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   chapter.ChapterTextTable,
			Columns: []string{chapter.ChapterTextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chaptertext.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chapter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ChapterUpdateOne is the builder for updating a single Chapter entity.
type ChapterUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ChapterMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *ChapterUpdateOne) SetUpdatedAt(t time.Time) *ChapterUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetDeletedAt sets the "deleted_at" field.
func (cuo *ChapterUpdateOne) SetDeletedAt(t time.Time) *ChapterUpdateOne {
	cuo.mutation.SetDeletedAt(t)
	return cuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cuo *ChapterUpdateOne) SetNillableDeletedAt(t *time.Time) *ChapterUpdateOne {
	if t != nil {
		cuo.SetDeletedAt(*t)
	}
	return cuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cuo *ChapterUpdateOne) ClearDeletedAt() *ChapterUpdateOne {
	cuo.mutation.ClearDeletedAt()
	return cuo
}

// SetNumber sets the "number" field.
func (cuo *ChapterUpdateOne) SetNumber(i int) *ChapterUpdateOne {
	cuo.mutation.ResetNumber()
	cuo.mutation.SetNumber(i)
	return cuo
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (cuo *ChapterUpdateOne) SetNillableNumber(i *int) *ChapterUpdateOne {
	if i != nil {
		cuo.SetNumber(*i)
	}
	return cuo
}

// AddNumber adds i to the "number" field.
func (cuo *ChapterUpdateOne) AddNumber(i int) *ChapterUpdateOne {
	cuo.mutation.AddNumber(i)
	return cuo
}

// ClearNumber clears the value of the "number" field.
func (cuo *ChapterUpdateOne) ClearNumber() *ChapterUpdateOne {
	cuo.mutation.ClearNumber()
	return cuo
}

// SetTitle sets the "title" field.
func (cuo *ChapterUpdateOne) SetTitle(s string) *ChapterUpdateOne {
	cuo.mutation.SetTitle(s)
	return cuo
}

// SetPartUUID sets the "part_uuid" field.
func (cuo *ChapterUpdateOne) SetPartUUID(s string) *ChapterUpdateOne {
	cuo.mutation.SetPartUUID(s)
	return cuo
}

// SetReleaseUUID sets the "release_uuid" field.
func (cuo *ChapterUpdateOne) SetReleaseUUID(s string) *ChapterUpdateOne {
	cuo.mutation.SetReleaseUUID(s)
	return cuo
}

// SetNillableReleaseUUID sets the "release_uuid" field if the given value is not nil.
func (cuo *ChapterUpdateOne) SetNillableReleaseUUID(s *string) *ChapterUpdateOne {
	if s != nil {
		cuo.SetReleaseUUID(*s)
	}
	return cuo
}

// ClearReleaseUUID clears the value of the "release_uuid" field.
func (cuo *ChapterUpdateOne) ClearReleaseUUID() *ChapterUpdateOne {
	cuo.mutation.ClearReleaseUUID()
	return cuo
}

// SetPartID sets the "part" edge to the Part entity by ID.
func (cuo *ChapterUpdateOne) SetPartID(id string) *ChapterUpdateOne {
	cuo.mutation.SetPartID(id)
	return cuo
}

// SetPart sets the "part" edge to the Part entity.
func (cuo *ChapterUpdateOne) SetPart(p *Part) *ChapterUpdateOne {
	return cuo.SetPartID(p.ID)
}

// SetReleaseID sets the "release" edge to the Release entity by ID.
func (cuo *ChapterUpdateOne) SetReleaseID(id string) *ChapterUpdateOne {
	cuo.mutation.SetReleaseID(id)
	return cuo
}

// SetNillableReleaseID sets the "release" edge to the Release entity by ID if the given value is not nil.
func (cuo *ChapterUpdateOne) SetNillableReleaseID(id *string) *ChapterUpdateOne {
	if id != nil {
		cuo = cuo.SetReleaseID(*id)
	}
	return cuo
}

// SetRelease sets the "release" edge to the Release entity.
func (cuo *ChapterUpdateOne) SetRelease(r *Release) *ChapterUpdateOne {
	return cuo.SetReleaseID(r.ID)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (cuo *ChapterUpdateOne) AddCommentIDs(ids ...string) *ChapterUpdateOne {
	cuo.mutation.AddCommentIDs(ids...)
	return cuo
}

// AddComments adds the "comments" edges to the Comment entity.
func (cuo *ChapterUpdateOne) AddComments(c ...*Comment) *ChapterUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddCommentIDs(ids...)
}

// SetChapterTextID sets the "chapter_text" edge to the ChapterText entity by ID.
func (cuo *ChapterUpdateOne) SetChapterTextID(id string) *ChapterUpdateOne {
	cuo.mutation.SetChapterTextID(id)
	return cuo
}

// SetNillableChapterTextID sets the "chapter_text" edge to the ChapterText entity by ID if the given value is not nil.
func (cuo *ChapterUpdateOne) SetNillableChapterTextID(id *string) *ChapterUpdateOne {
	if id != nil {
		cuo = cuo.SetChapterTextID(*id)
	}
	return cuo
}

// SetChapterText sets the "chapter_text" edge to the ChapterText entity.
func (cuo *ChapterUpdateOne) SetChapterText(c *ChapterText) *ChapterUpdateOne {
	return cuo.SetChapterTextID(c.ID)
}

// Mutation returns the ChapterMutation object of the builder.
func (cuo *ChapterUpdateOne) Mutation() *ChapterMutation {
	return cuo.mutation
}

// ClearPart clears the "part" edge to the Part entity.
func (cuo *ChapterUpdateOne) ClearPart() *ChapterUpdateOne {
	cuo.mutation.ClearPart()
	return cuo
}

// ClearRelease clears the "release" edge to the Release entity.
func (cuo *ChapterUpdateOne) ClearRelease() *ChapterUpdateOne {
	cuo.mutation.ClearRelease()
	return cuo
}

// ClearComments clears all "comments" edges to the Comment entity.
func (cuo *ChapterUpdateOne) ClearComments() *ChapterUpdateOne {
	cuo.mutation.ClearComments()
	return cuo
}

// RemoveCommentIDs removes the "comments" edge to Comment entities by IDs.
func (cuo *ChapterUpdateOne) RemoveCommentIDs(ids ...string) *ChapterUpdateOne {
	cuo.mutation.RemoveCommentIDs(ids...)
	return cuo
}

// RemoveComments removes "comments" edges to Comment entities.
func (cuo *ChapterUpdateOne) RemoveComments(c ...*Comment) *ChapterUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveCommentIDs(ids...)
}

// ClearChapterText clears the "chapter_text" edge to the ChapterText entity.
func (cuo *ChapterUpdateOne) ClearChapterText() *ChapterUpdateOne {
	cuo.mutation.ClearChapterText()
	return cuo
}

// Where appends a list predicates to the ChapterUpdate builder.
func (cuo *ChapterUpdateOne) Where(ps ...predicate.Chapter) *ChapterUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ChapterUpdateOne) Select(field string, fields ...string) *ChapterUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Chapter entity.
func (cuo *ChapterUpdateOne) Save(ctx context.Context) (*Chapter, error) {
	if err := cuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks[*Chapter, ChapterMutation](ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ChapterUpdateOne) SaveX(ctx context.Context) *Chapter {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ChapterUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ChapterUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *ChapterUpdateOne) defaults() error {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		if chapter.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized chapter.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := chapter.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cuo *ChapterUpdateOne) check() error {
	if v, ok := cuo.mutation.Number(); ok {
		if err := chapter.NumberValidator(v); err != nil {
			return &ValidationError{Name: "number", err: fmt.Errorf(`ent: validator failed for field "Chapter.number": %w`, err)}
		}
	}
	if _, ok := cuo.mutation.PartID(); cuo.mutation.PartCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Chapter.part"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cuo *ChapterUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ChapterUpdateOne {
	cuo.modifiers = append(cuo.modifiers, modifiers...)
	return cuo
}

func (cuo *ChapterUpdateOne) sqlSave(ctx context.Context) (_node *Chapter, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(chapter.Table, chapter.Columns, sqlgraph.NewFieldSpec(chapter.FieldID, field.TypeString))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Chapter.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, chapter.FieldID)
		for _, f := range fields {
			if !chapter.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != chapter.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(chapter.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.DeletedAt(); ok {
		_spec.SetField(chapter.FieldDeletedAt, field.TypeTime, value)
	}
	if cuo.mutation.DeletedAtCleared() {
		_spec.ClearField(chapter.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.Number(); ok {
		_spec.SetField(chapter.FieldNumber, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedNumber(); ok {
		_spec.AddField(chapter.FieldNumber, field.TypeInt, value)
	}
	if cuo.mutation.NumberCleared() {
		_spec.ClearField(chapter.FieldNumber, field.TypeInt)
	}
	if value, ok := cuo.mutation.Title(); ok {
		_spec.SetField(chapter.FieldTitle, field.TypeString, value)
	}
	if cuo.mutation.PartCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chapter.PartTable,
			Columns: []string{chapter.PartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(part.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.PartIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chapter.PartTable,
			Columns: []string{chapter.PartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(part.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ReleaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chapter.ReleaseTable,
			Columns: []string{chapter.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(release.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ReleaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chapter.ReleaseTable,
			Columns: []string{chapter.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(release.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chapter.CommentsTable,
			Columns: []string{chapter.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !cuo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chapter.CommentsTable,
			Columns: []string{chapter.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chapter.CommentsTable,
			Columns: []string{chapter.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ChapterTextCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   chapter.ChapterTextTable,
			Columns: []string{chapter.ChapterTextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chaptertext.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ChapterTextIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   chapter.ChapterTextTable,
			Columns: []string{chapter.ChapterTextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chaptertext.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cuo.modifiers...)
	_node = &Chapter{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chapter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
