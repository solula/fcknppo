// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"waterfall-backend/internal/modules/stores/db/ent/chapter"
	"waterfall-backend/internal/modules/stores/db/ent/chaptertext"
	"waterfall-backend/internal/modules/stores/db/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ChapterTextUpdate is the builder for updating ChapterText entities.
type ChapterTextUpdate struct {
	config
	hooks     []Hook
	mutation  *ChapterTextMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ChapterTextUpdate builder.
func (ctu *ChapterTextUpdate) Where(ps ...predicate.ChapterText) *ChapterTextUpdate {
	ctu.mutation.Where(ps...)
	return ctu
}

// SetUpdatedAt sets the "updated_at" field.
func (ctu *ChapterTextUpdate) SetUpdatedAt(t time.Time) *ChapterTextUpdate {
	ctu.mutation.SetUpdatedAt(t)
	return ctu
}

// SetDeletedAt sets the "deleted_at" field.
func (ctu *ChapterTextUpdate) SetDeletedAt(t time.Time) *ChapterTextUpdate {
	ctu.mutation.SetDeletedAt(t)
	return ctu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ctu *ChapterTextUpdate) SetNillableDeletedAt(t *time.Time) *ChapterTextUpdate {
	if t != nil {
		ctu.SetDeletedAt(*t)
	}
	return ctu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ctu *ChapterTextUpdate) ClearDeletedAt() *ChapterTextUpdate {
	ctu.mutation.ClearDeletedAt()
	return ctu
}

// SetChapterUUID sets the "chapter_uuid" field.
func (ctu *ChapterTextUpdate) SetChapterUUID(s string) *ChapterTextUpdate {
	ctu.mutation.SetChapterUUID(s)
	return ctu
}

// SetText sets the "text" field.
func (ctu *ChapterTextUpdate) SetText(s string) *ChapterTextUpdate {
	ctu.mutation.SetText(s)
	return ctu
}

// SetChapterID sets the "chapter" edge to the Chapter entity by ID.
func (ctu *ChapterTextUpdate) SetChapterID(id string) *ChapterTextUpdate {
	ctu.mutation.SetChapterID(id)
	return ctu
}

// SetChapter sets the "chapter" edge to the Chapter entity.
func (ctu *ChapterTextUpdate) SetChapter(c *Chapter) *ChapterTextUpdate {
	return ctu.SetChapterID(c.ID)
}

// Mutation returns the ChapterTextMutation object of the builder.
func (ctu *ChapterTextUpdate) Mutation() *ChapterTextMutation {
	return ctu.mutation
}

// ClearChapter clears the "chapter" edge to the Chapter entity.
func (ctu *ChapterTextUpdate) ClearChapter() *ChapterTextUpdate {
	ctu.mutation.ClearChapter()
	return ctu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ctu *ChapterTextUpdate) Save(ctx context.Context) (int, error) {
	if err := ctu.defaults(); err != nil {
		return 0, err
	}
	return withHooks[int, ChapterTextMutation](ctx, ctu.sqlSave, ctu.mutation, ctu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ctu *ChapterTextUpdate) SaveX(ctx context.Context) int {
	affected, err := ctu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ctu *ChapterTextUpdate) Exec(ctx context.Context) error {
	_, err := ctu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctu *ChapterTextUpdate) ExecX(ctx context.Context) {
	if err := ctu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ctu *ChapterTextUpdate) defaults() error {
	if _, ok := ctu.mutation.UpdatedAt(); !ok {
		if chaptertext.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized chaptertext.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := chaptertext.UpdateDefaultUpdatedAt()
		ctu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ctu *ChapterTextUpdate) check() error {
	if _, ok := ctu.mutation.ChapterID(); ctu.mutation.ChapterCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ChapterText.chapter"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ctu *ChapterTextUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ChapterTextUpdate {
	ctu.modifiers = append(ctu.modifiers, modifiers...)
	return ctu
}

func (ctu *ChapterTextUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ctu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(chaptertext.Table, chaptertext.Columns, sqlgraph.NewFieldSpec(chaptertext.FieldID, field.TypeString))
	if ps := ctu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ctu.mutation.UpdatedAt(); ok {
		_spec.SetField(chaptertext.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ctu.mutation.DeletedAt(); ok {
		_spec.SetField(chaptertext.FieldDeletedAt, field.TypeTime, value)
	}
	if ctu.mutation.DeletedAtCleared() {
		_spec.ClearField(chaptertext.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ctu.mutation.Text(); ok {
		_spec.SetField(chaptertext.FieldText, field.TypeString, value)
	}
	if ctu.mutation.ChapterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   chaptertext.ChapterTable,
			Columns: []string{chaptertext.ChapterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chapter.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ctu.mutation.ChapterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   chaptertext.ChapterTable,
			Columns: []string{chaptertext.ChapterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chapter.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ctu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ctu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chaptertext.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ctu.mutation.done = true
	return n, nil
}

// ChapterTextUpdateOne is the builder for updating a single ChapterText entity.
type ChapterTextUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ChapterTextMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (ctuo *ChapterTextUpdateOne) SetUpdatedAt(t time.Time) *ChapterTextUpdateOne {
	ctuo.mutation.SetUpdatedAt(t)
	return ctuo
}

// SetDeletedAt sets the "deleted_at" field.
func (ctuo *ChapterTextUpdateOne) SetDeletedAt(t time.Time) *ChapterTextUpdateOne {
	ctuo.mutation.SetDeletedAt(t)
	return ctuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ctuo *ChapterTextUpdateOne) SetNillableDeletedAt(t *time.Time) *ChapterTextUpdateOne {
	if t != nil {
		ctuo.SetDeletedAt(*t)
	}
	return ctuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ctuo *ChapterTextUpdateOne) ClearDeletedAt() *ChapterTextUpdateOne {
	ctuo.mutation.ClearDeletedAt()
	return ctuo
}

// SetChapterUUID sets the "chapter_uuid" field.
func (ctuo *ChapterTextUpdateOne) SetChapterUUID(s string) *ChapterTextUpdateOne {
	ctuo.mutation.SetChapterUUID(s)
	return ctuo
}

// SetText sets the "text" field.
func (ctuo *ChapterTextUpdateOne) SetText(s string) *ChapterTextUpdateOne {
	ctuo.mutation.SetText(s)
	return ctuo
}

// SetChapterID sets the "chapter" edge to the Chapter entity by ID.
func (ctuo *ChapterTextUpdateOne) SetChapterID(id string) *ChapterTextUpdateOne {
	ctuo.mutation.SetChapterID(id)
	return ctuo
}

// SetChapter sets the "chapter" edge to the Chapter entity.
func (ctuo *ChapterTextUpdateOne) SetChapter(c *Chapter) *ChapterTextUpdateOne {
	return ctuo.SetChapterID(c.ID)
}

// Mutation returns the ChapterTextMutation object of the builder.
func (ctuo *ChapterTextUpdateOne) Mutation() *ChapterTextMutation {
	return ctuo.mutation
}

// ClearChapter clears the "chapter" edge to the Chapter entity.
func (ctuo *ChapterTextUpdateOne) ClearChapter() *ChapterTextUpdateOne {
	ctuo.mutation.ClearChapter()
	return ctuo
}

// Where appends a list predicates to the ChapterTextUpdate builder.
func (ctuo *ChapterTextUpdateOne) Where(ps ...predicate.ChapterText) *ChapterTextUpdateOne {
	ctuo.mutation.Where(ps...)
	return ctuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ctuo *ChapterTextUpdateOne) Select(field string, fields ...string) *ChapterTextUpdateOne {
	ctuo.fields = append([]string{field}, fields...)
	return ctuo
}

// Save executes the query and returns the updated ChapterText entity.
func (ctuo *ChapterTextUpdateOne) Save(ctx context.Context) (*ChapterText, error) {
	if err := ctuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks[*ChapterText, ChapterTextMutation](ctx, ctuo.sqlSave, ctuo.mutation, ctuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ctuo *ChapterTextUpdateOne) SaveX(ctx context.Context) *ChapterText {
	node, err := ctuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ctuo *ChapterTextUpdateOne) Exec(ctx context.Context) error {
	_, err := ctuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctuo *ChapterTextUpdateOne) ExecX(ctx context.Context) {
	if err := ctuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ctuo *ChapterTextUpdateOne) defaults() error {
	if _, ok := ctuo.mutation.UpdatedAt(); !ok {
		if chaptertext.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized chaptertext.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := chaptertext.UpdateDefaultUpdatedAt()
		ctuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ctuo *ChapterTextUpdateOne) check() error {
	if _, ok := ctuo.mutation.ChapterID(); ctuo.mutation.ChapterCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ChapterText.chapter"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ctuo *ChapterTextUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ChapterTextUpdateOne {
	ctuo.modifiers = append(ctuo.modifiers, modifiers...)
	return ctuo
}

func (ctuo *ChapterTextUpdateOne) sqlSave(ctx context.Context) (_node *ChapterText, err error) {
	if err := ctuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(chaptertext.Table, chaptertext.Columns, sqlgraph.NewFieldSpec(chaptertext.FieldID, field.TypeString))
	id, ok := ctuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ChapterText.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ctuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, chaptertext.FieldID)
		for _, f := range fields {
			if !chaptertext.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != chaptertext.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ctuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ctuo.mutation.UpdatedAt(); ok {
		_spec.SetField(chaptertext.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ctuo.mutation.DeletedAt(); ok {
		_spec.SetField(chaptertext.FieldDeletedAt, field.TypeTime, value)
	}
	if ctuo.mutation.DeletedAtCleared() {
		_spec.ClearField(chaptertext.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ctuo.mutation.Text(); ok {
		_spec.SetField(chaptertext.FieldText, field.TypeString, value)
	}
	if ctuo.mutation.ChapterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   chaptertext.ChapterTable,
			Columns: []string{chaptertext.ChapterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chapter.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ctuo.mutation.ChapterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   chaptertext.ChapterTable,
			Columns: []string{chaptertext.ChapterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chapter.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ctuo.modifiers...)
	_node = &ChapterText{config: ctuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ctuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chaptertext.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ctuo.mutation.done = true
	return _node, nil
}
