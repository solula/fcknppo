// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// ChaptersColumns holds the columns for the "chapters" table.
	ChaptersColumns = []*schema.Column{
		{Name: "uuid", Type: field.TypeString, Default: schema.Expr("uuid_generate_v4()"), SchemaType: map[string]string{"postgres": "uuid"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "number", Type: field.TypeInt, Nullable: true},
		{Name: "title", Type: field.TypeString},
		{Name: "part_uuid", Type: field.TypeString, SchemaType: map[string]string{"postgres": "uuid"}},
		{Name: "release_uuid", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"postgres": "uuid"}},
	}
	// ChaptersTable holds the schema information for the "chapters" table.
	ChaptersTable = &schema.Table{
		Name:       "chapters",
		Columns:    ChaptersColumns,
		PrimaryKey: []*schema.Column{ChaptersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "chapters_parts_chapters",
				Columns:    []*schema.Column{ChaptersColumns[6]},
				RefColumns: []*schema.Column{PartsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "chapters_releases_chapters",
				Columns:    []*schema.Column{ChaptersColumns[7]},
				RefColumns: []*schema.Column{ReleasesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "chapter_number_part_uuid",
				Unique:  true,
				Columns: []*schema.Column{ChaptersColumns[4], ChaptersColumns[6]},
			},
			{
				Name:    "chapter_part_uuid",
				Unique:  false,
				Columns: []*schema.Column{ChaptersColumns[6]},
			},
			{
				Name:    "chapter_release_uuid",
				Unique:  false,
				Columns: []*schema.Column{ChaptersColumns[7]},
			},
		},
	}
	// ChapterTextsColumns holds the columns for the "chapter_texts" table.
	ChapterTextsColumns = []*schema.Column{
		{Name: "uuid", Type: field.TypeString, Default: schema.Expr("uuid_generate_v4()"), SchemaType: map[string]string{"postgres": "uuid"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "text", Type: field.TypeString},
		{Name: "chapter_uuid", Type: field.TypeString, Unique: true, SchemaType: map[string]string{"postgres": "uuid"}},
	}
	// ChapterTextsTable holds the schema information for the "chapter_texts" table.
	ChapterTextsTable = &schema.Table{
		Name:       "chapter_texts",
		Columns:    ChapterTextsColumns,
		PrimaryKey: []*schema.Column{ChapterTextsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "chapter_texts_chapters_chapter_text",
				Columns:    []*schema.Column{ChapterTextsColumns[5]},
				RefColumns: []*schema.Column{ChaptersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "chaptertext_chapter_uuid",
				Unique:  false,
				Columns: []*schema.Column{ChapterTextsColumns[5]},
			},
		},
	}
	// CommentsColumns holds the columns for the "comments" table.
	CommentsColumns = []*schema.Column{
		{Name: "uuid", Type: field.TypeString, Default: schema.Expr("uuid_generate_v4()"), SchemaType: map[string]string{"postgres": "uuid"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "text", Type: field.TypeString, Size: 4096},
		{Name: "chapter_uuid", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"postgres": "uuid"}},
		{Name: "parent_uuid", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"postgres": "uuid"}},
		{Name: "author_uuid", Type: field.TypeString, SchemaType: map[string]string{"postgres": "uuid"}},
	}
	// CommentsTable holds the schema information for the "comments" table.
	CommentsTable = &schema.Table{
		Name:       "comments",
		Columns:    CommentsColumns,
		PrimaryKey: []*schema.Column{CommentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "comments_chapters_comments",
				Columns:    []*schema.Column{CommentsColumns[5]},
				RefColumns: []*schema.Column{ChaptersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "comments_comments_children",
				Columns:    []*schema.Column{CommentsColumns[6]},
				RefColumns: []*schema.Column{CommentsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "comments_auth_users_comments",
				Columns:    []*schema.Column{CommentsColumns[7]},
				RefColumns: []*schema.Column{AuthUsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "comment_chapter_uuid",
				Unique:  false,
				Columns: []*schema.Column{CommentsColumns[5]},
			},
		},
	}
	// FilesColumns holds the columns for the "files" table.
	FilesColumns = []*schema.Column{
		{Name: "uuid", Type: field.TypeString, Default: schema.Expr("uuid_generate_v4()"), SchemaType: map[string]string{"postgres": "uuid"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "filename", Type: field.TypeString},
		{Name: "mime_type", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "object_type", Type: field.TypeString},
		{Name: "object_ref", Type: field.TypeString, SchemaType: map[string]string{"postgres": "uuid"}},
		{Name: "type", Type: field.TypeString},
		{Name: "temp", Type: field.TypeBool},
		{Name: "sequence_number", Type: field.TypeUint, Nullable: true},
		{Name: "creator_uuid", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"postgres": "uuid"}},
	}
	// FilesTable holds the schema information for the "files" table.
	FilesTable = &schema.Table{
		Name:       "files",
		Columns:    FilesColumns,
		PrimaryKey: []*schema.Column{FilesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "files_auth_users_files",
				Columns:    []*schema.Column{FilesColumns[11]},
				RefColumns: []*schema.Column{AuthUsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "file_object_type_object_ref",
				Unique:  false,
				Columns: []*schema.Column{FilesColumns[6], FilesColumns[7]},
			},
		},
	}
	// DbMigrationsColumns holds the columns for the "db_migrations" table.
	DbMigrationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "migrated", Type: field.TypeInt},
	}
	// DbMigrationsTable holds the schema information for the "db_migrations" table.
	DbMigrationsTable = &schema.Table{
		Name:       "db_migrations",
		Columns:    DbMigrationsColumns,
		PrimaryKey: []*schema.Column{DbMigrationsColumns[0]},
	}
	// PartsColumns holds the columns for the "parts" table.
	PartsColumns = []*schema.Column{
		{Name: "uuid", Type: field.TypeString, Default: schema.Expr("uuid_generate_v4()"), SchemaType: map[string]string{"postgres": "uuid"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "number", Type: field.TypeInt, Unique: true, Nullable: true},
		{Name: "title", Type: field.TypeString},
		{Name: "annotation", Type: field.TypeString, Nullable: true},
		{Name: "release_uuid", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"postgres": "uuid"}},
	}
	// PartsTable holds the schema information for the "parts" table.
	PartsTable = &schema.Table{
		Name:       "parts",
		Columns:    PartsColumns,
		PrimaryKey: []*schema.Column{PartsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "parts_releases_parts",
				Columns:    []*schema.Column{PartsColumns[7]},
				RefColumns: []*schema.Column{ReleasesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "part_release_uuid",
				Unique:  false,
				Columns: []*schema.Column{PartsColumns[7]},
			},
		},
	}
	// AuthPermissionsColumns holds the columns for the "auth_permissions" table.
	AuthPermissionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
	}
	// AuthPermissionsTable holds the schema information for the "auth_permissions" table.
	AuthPermissionsTable = &schema.Table{
		Name:       "auth_permissions",
		Columns:    AuthPermissionsColumns,
		PrimaryKey: []*schema.Column{AuthPermissionsColumns[0]},
	}
	// ReleasesColumns holds the columns for the "releases" table.
	ReleasesColumns = []*schema.Column{
		{Name: "uuid", Type: field.TypeString, Default: schema.Expr("uuid_generate_v4()"), SchemaType: map[string]string{"postgres": "uuid"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "release_date", Type: field.TypeTime},
		{Name: "description", Type: field.TypeString},
	}
	// ReleasesTable holds the schema information for the "releases" table.
	ReleasesTable = &schema.Table{
		Name:       "releases",
		Columns:    ReleasesColumns,
		PrimaryKey: []*schema.Column{ReleasesColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "release_release_date",
				Unique:  false,
				Columns: []*schema.Column{ReleasesColumns[3]},
			},
		},
	}
	// AuthRolesColumns holds the columns for the "auth_roles" table.
	AuthRolesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "release_delay", Type: field.TypeFloat64, SchemaType: map[string]string{"postgres": "bigint"}},
	}
	// AuthRolesTable holds the schema information for the "auth_roles" table.
	AuthRolesTable = &schema.Table{
		Name:       "auth_roles",
		Columns:    AuthRolesColumns,
		PrimaryKey: []*schema.Column{AuthRolesColumns[0]},
	}
	// DbSeedMigrationsColumns holds the columns for the "db_seed_migrations" table.
	DbSeedMigrationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "migrated", Type: field.TypeInt},
	}
	// DbSeedMigrationsTable holds the schema information for the "db_seed_migrations" table.
	DbSeedMigrationsTable = &schema.Table{
		Name:       "db_seed_migrations",
		Columns:    DbSeedMigrationsColumns,
		PrimaryKey: []*schema.Column{DbSeedMigrationsColumns[0]},
	}
	// AuthUsersColumns holds the columns for the "auth_users" table.
	AuthUsersColumns = []*schema.Column{
		{Name: "uuid", Type: field.TypeString, Default: schema.Expr("uuid_generate_v4()"), SchemaType: map[string]string{"postgres": "uuid"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "email", Type: field.TypeString, Unique: true, Nullable: true},
		{Name: "fullname", Type: field.TypeString},
		{Name: "username", Type: field.TypeString},
		{Name: "password_hash", Type: field.TypeString, Nullable: true},
		{Name: "vk_id", Type: field.TypeInt64, Unique: true, Nullable: true},
		{Name: "score", Type: field.TypeInt, Default: 0},
		{Name: "email_verified", Type: field.TypeBool, Default: false},
		{Name: "serial_number", Type: field.TypeUint, Unique: true, SchemaType: map[string]string{"postgres": "serial"}},
	}
	// AuthUsersTable holds the schema information for the "auth_users" table.
	AuthUsersTable = &schema.Table{
		Name:       "auth_users",
		Columns:    AuthUsersColumns,
		PrimaryKey: []*schema.Column{AuthUsersColumns[0]},
	}
	// AuthRolesPermissionsColumns holds the columns for the "auth_roles_permissions" table.
	AuthRolesPermissionsColumns = []*schema.Column{
		{Name: "role_id", Type: field.TypeString},
		{Name: "permission_id", Type: field.TypeString},
	}
	// AuthRolesPermissionsTable holds the schema information for the "auth_roles_permissions" table.
	AuthRolesPermissionsTable = &schema.Table{
		Name:       "auth_roles_permissions",
		Columns:    AuthRolesPermissionsColumns,
		PrimaryKey: []*schema.Column{AuthRolesPermissionsColumns[0], AuthRolesPermissionsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "auth_roles_permissions_role_id",
				Columns:    []*schema.Column{AuthRolesPermissionsColumns[0]},
				RefColumns: []*schema.Column{AuthRolesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "auth_roles_permissions_permission_id",
				Columns:    []*schema.Column{AuthRolesPermissionsColumns[1]},
				RefColumns: []*schema.Column{AuthPermissionsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// AuthUsersRolesColumns holds the columns for the "auth_users_roles" table.
	AuthUsersRolesColumns = []*schema.Column{
		{Name: "user_uuid", Type: field.TypeString, SchemaType: map[string]string{"postgres": "uuid"}},
		{Name: "role_id", Type: field.TypeString},
	}
	// AuthUsersRolesTable holds the schema information for the "auth_users_roles" table.
	AuthUsersRolesTable = &schema.Table{
		Name:       "auth_users_roles",
		Columns:    AuthUsersRolesColumns,
		PrimaryKey: []*schema.Column{AuthUsersRolesColumns[0], AuthUsersRolesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "auth_users_roles_user_uuid",
				Columns:    []*schema.Column{AuthUsersRolesColumns[0]},
				RefColumns: []*schema.Column{AuthUsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "auth_users_roles_role_id",
				Columns:    []*schema.Column{AuthUsersRolesColumns[1]},
				RefColumns: []*schema.Column{AuthRolesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		ChaptersTable,
		ChapterTextsTable,
		CommentsTable,
		FilesTable,
		DbMigrationsTable,
		PartsTable,
		AuthPermissionsTable,
		ReleasesTable,
		AuthRolesTable,
		DbSeedMigrationsTable,
		AuthUsersTable,
		AuthRolesPermissionsTable,
		AuthUsersRolesTable,
	}
)

func init() {
	ChaptersTable.ForeignKeys[0].RefTable = PartsTable
	ChaptersTable.ForeignKeys[1].RefTable = ReleasesTable
	ChapterTextsTable.ForeignKeys[0].RefTable = ChaptersTable
	CommentsTable.ForeignKeys[0].RefTable = ChaptersTable
	CommentsTable.ForeignKeys[1].RefTable = CommentsTable
	CommentsTable.ForeignKeys[2].RefTable = AuthUsersTable
	FilesTable.ForeignKeys[0].RefTable = AuthUsersTable
	DbMigrationsTable.Annotation = &entsql.Annotation{
		Table: "db_migrations",
	}
	PartsTable.ForeignKeys[0].RefTable = ReleasesTable
	AuthPermissionsTable.Annotation = &entsql.Annotation{
		Table: "auth_permissions",
	}
	AuthRolesTable.Annotation = &entsql.Annotation{
		Table: "auth_roles",
	}
	DbSeedMigrationsTable.Annotation = &entsql.Annotation{
		Table: "db_seed_migrations",
	}
	AuthUsersTable.Annotation = &entsql.Annotation{
		Table: "auth_users",
	}
	AuthRolesPermissionsTable.ForeignKeys[0].RefTable = AuthRolesTable
	AuthRolesPermissionsTable.ForeignKeys[1].RefTable = AuthPermissionsTable
	AuthUsersRolesTable.ForeignKeys[0].RefTable = AuthUsersTable
	AuthUsersRolesTable.ForeignKeys[1].RefTable = AuthRolesTable
}
