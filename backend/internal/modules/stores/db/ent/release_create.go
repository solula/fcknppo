// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"waterfall-backend/internal/modules/stores/db/ent/chapter"
	"waterfall-backend/internal/modules/stores/db/ent/part"
	"waterfall-backend/internal/modules/stores/db/ent/release"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ReleaseCreate is the builder for creating a Release entity.
type ReleaseCreate struct {
	config
	mutation *ReleaseMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (rc *ReleaseCreate) SetCreatedAt(t time.Time) *ReleaseCreate {
	rc.mutation.SetCreatedAt(t)
	return rc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rc *ReleaseCreate) SetNillableCreatedAt(t *time.Time) *ReleaseCreate {
	if t != nil {
		rc.SetCreatedAt(*t)
	}
	return rc
}

// SetUpdatedAt sets the "updated_at" field.
func (rc *ReleaseCreate) SetUpdatedAt(t time.Time) *ReleaseCreate {
	rc.mutation.SetUpdatedAt(t)
	return rc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rc *ReleaseCreate) SetNillableUpdatedAt(t *time.Time) *ReleaseCreate {
	if t != nil {
		rc.SetUpdatedAt(*t)
	}
	return rc
}

// SetReleaseDate sets the "release_date" field.
func (rc *ReleaseCreate) SetReleaseDate(t time.Time) *ReleaseCreate {
	rc.mutation.SetReleaseDate(t)
	return rc
}

// SetDescription sets the "description" field.
func (rc *ReleaseCreate) SetDescription(s string) *ReleaseCreate {
	rc.mutation.SetDescription(s)
	return rc
}

// SetID sets the "id" field.
func (rc *ReleaseCreate) SetID(s string) *ReleaseCreate {
	rc.mutation.SetID(s)
	return rc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rc *ReleaseCreate) SetNillableID(s *string) *ReleaseCreate {
	if s != nil {
		rc.SetID(*s)
	}
	return rc
}

// AddChapterIDs adds the "chapters" edge to the Chapter entity by IDs.
func (rc *ReleaseCreate) AddChapterIDs(ids ...string) *ReleaseCreate {
	rc.mutation.AddChapterIDs(ids...)
	return rc
}

// AddChapters adds the "chapters" edges to the Chapter entity.
func (rc *ReleaseCreate) AddChapters(c ...*Chapter) *ReleaseCreate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return rc.AddChapterIDs(ids...)
}

// AddPartIDs adds the "parts" edge to the Part entity by IDs.
func (rc *ReleaseCreate) AddPartIDs(ids ...string) *ReleaseCreate {
	rc.mutation.AddPartIDs(ids...)
	return rc
}

// AddParts adds the "parts" edges to the Part entity.
func (rc *ReleaseCreate) AddParts(p ...*Part) *ReleaseCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rc.AddPartIDs(ids...)
}

// Mutation returns the ReleaseMutation object of the builder.
func (rc *ReleaseCreate) Mutation() *ReleaseMutation {
	return rc.mutation
}

// Save creates the Release in the database.
func (rc *ReleaseCreate) Save(ctx context.Context) (*Release, error) {
	if err := rc.defaults(); err != nil {
		return nil, err
	}
	return withHooks[*Release, ReleaseMutation](ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *ReleaseCreate) SaveX(ctx context.Context) *Release {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *ReleaseCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *ReleaseCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *ReleaseCreate) defaults() error {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		if release.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized release.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := release.DefaultCreatedAt()
		rc.mutation.SetCreatedAt(v)
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		if release.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized release.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := release.DefaultUpdatedAt()
		rc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rc.mutation.ID(); !ok {
		if release.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized release.DefaultID (forgotten import ent/runtime?)")
		}
		v := release.DefaultID()
		rc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rc *ReleaseCreate) check() error {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Release.created_at"`)}
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Release.updated_at"`)}
	}
	if _, ok := rc.mutation.ReleaseDate(); !ok {
		return &ValidationError{Name: "release_date", err: errors.New(`ent: missing required field "Release.release_date"`)}
	}
	if _, ok := rc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Release.description"`)}
	}
	return nil
}

func (rc *ReleaseCreate) sqlSave(ctx context.Context) (*Release, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Release.ID type: %T", _spec.ID.Value)
		}
	}
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *ReleaseCreate) createSpec() (*Release, *sqlgraph.CreateSpec) {
	var (
		_node = &Release{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(release.Table, sqlgraph.NewFieldSpec(release.FieldID, field.TypeString))
	)
	_spec.OnConflict = rc.conflict
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.SetField(release.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rc.mutation.UpdatedAt(); ok {
		_spec.SetField(release.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := rc.mutation.ReleaseDate(); ok {
		_spec.SetField(release.FieldReleaseDate, field.TypeTime, value)
		_node.ReleaseDate = value
	}
	if value, ok := rc.mutation.Description(); ok {
		_spec.SetField(release.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if nodes := rc.mutation.ChaptersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   release.ChaptersTable,
			Columns: []string{release.ChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chapter.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.PartsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   release.PartsTable,
			Columns: []string{release.PartsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(part.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Release.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ReleaseUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (rc *ReleaseCreate) OnConflict(opts ...sql.ConflictOption) *ReleaseUpsertOne {
	rc.conflict = opts
	return &ReleaseUpsertOne{
		create: rc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Release.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rc *ReleaseCreate) OnConflictColumns(columns ...string) *ReleaseUpsertOne {
	rc.conflict = append(rc.conflict, sql.ConflictColumns(columns...))
	return &ReleaseUpsertOne{
		create: rc,
	}
}

type (
	// ReleaseUpsertOne is the builder for "upsert"-ing
	//  one Release node.
	ReleaseUpsertOne struct {
		create *ReleaseCreate
	}

	// ReleaseUpsert is the "OnConflict" setter.
	ReleaseUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *ReleaseUpsert) SetUpdatedAt(v time.Time) *ReleaseUpsert {
	u.Set(release.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ReleaseUpsert) UpdateUpdatedAt() *ReleaseUpsert {
	u.SetExcluded(release.FieldUpdatedAt)
	return u
}

// SetReleaseDate sets the "release_date" field.
func (u *ReleaseUpsert) SetReleaseDate(v time.Time) *ReleaseUpsert {
	u.Set(release.FieldReleaseDate, v)
	return u
}

// UpdateReleaseDate sets the "release_date" field to the value that was provided on create.
func (u *ReleaseUpsert) UpdateReleaseDate() *ReleaseUpsert {
	u.SetExcluded(release.FieldReleaseDate)
	return u
}

// SetDescription sets the "description" field.
func (u *ReleaseUpsert) SetDescription(v string) *ReleaseUpsert {
	u.Set(release.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ReleaseUpsert) UpdateDescription() *ReleaseUpsert {
	u.SetExcluded(release.FieldDescription)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Release.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(release.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ReleaseUpsertOne) UpdateNewValues() *ReleaseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(release.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(release.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Release.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ReleaseUpsertOne) Ignore() *ReleaseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ReleaseUpsertOne) DoNothing() *ReleaseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ReleaseCreate.OnConflict
// documentation for more info.
func (u *ReleaseUpsertOne) Update(set func(*ReleaseUpsert)) *ReleaseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ReleaseUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ReleaseUpsertOne) SetUpdatedAt(v time.Time) *ReleaseUpsertOne {
	return u.Update(func(s *ReleaseUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ReleaseUpsertOne) UpdateUpdatedAt() *ReleaseUpsertOne {
	return u.Update(func(s *ReleaseUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetReleaseDate sets the "release_date" field.
func (u *ReleaseUpsertOne) SetReleaseDate(v time.Time) *ReleaseUpsertOne {
	return u.Update(func(s *ReleaseUpsert) {
		s.SetReleaseDate(v)
	})
}

// UpdateReleaseDate sets the "release_date" field to the value that was provided on create.
func (u *ReleaseUpsertOne) UpdateReleaseDate() *ReleaseUpsertOne {
	return u.Update(func(s *ReleaseUpsert) {
		s.UpdateReleaseDate()
	})
}

// SetDescription sets the "description" field.
func (u *ReleaseUpsertOne) SetDescription(v string) *ReleaseUpsertOne {
	return u.Update(func(s *ReleaseUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ReleaseUpsertOne) UpdateDescription() *ReleaseUpsertOne {
	return u.Update(func(s *ReleaseUpsert) {
		s.UpdateDescription()
	})
}

// Exec executes the query.
func (u *ReleaseUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ReleaseCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ReleaseUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ReleaseUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ReleaseUpsertOne.ID is not supported by MySQL driver. Use ReleaseUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ReleaseUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ReleaseCreateBulk is the builder for creating many Release entities in bulk.
type ReleaseCreateBulk struct {
	config
	builders []*ReleaseCreate
	conflict []sql.ConflictOption
}

// Save creates the Release entities in the database.
func (rcb *ReleaseCreateBulk) Save(ctx context.Context) ([]*Release, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Release, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReleaseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *ReleaseCreateBulk) SaveX(ctx context.Context) []*Release {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *ReleaseCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *ReleaseCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Release.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ReleaseUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (rcb *ReleaseCreateBulk) OnConflict(opts ...sql.ConflictOption) *ReleaseUpsertBulk {
	rcb.conflict = opts
	return &ReleaseUpsertBulk{
		create: rcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Release.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rcb *ReleaseCreateBulk) OnConflictColumns(columns ...string) *ReleaseUpsertBulk {
	rcb.conflict = append(rcb.conflict, sql.ConflictColumns(columns...))
	return &ReleaseUpsertBulk{
		create: rcb,
	}
}

// ReleaseUpsertBulk is the builder for "upsert"-ing
// a bulk of Release nodes.
type ReleaseUpsertBulk struct {
	create *ReleaseCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Release.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(release.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ReleaseUpsertBulk) UpdateNewValues() *ReleaseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(release.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(release.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Release.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ReleaseUpsertBulk) Ignore() *ReleaseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ReleaseUpsertBulk) DoNothing() *ReleaseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ReleaseCreateBulk.OnConflict
// documentation for more info.
func (u *ReleaseUpsertBulk) Update(set func(*ReleaseUpsert)) *ReleaseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ReleaseUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ReleaseUpsertBulk) SetUpdatedAt(v time.Time) *ReleaseUpsertBulk {
	return u.Update(func(s *ReleaseUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ReleaseUpsertBulk) UpdateUpdatedAt() *ReleaseUpsertBulk {
	return u.Update(func(s *ReleaseUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetReleaseDate sets the "release_date" field.
func (u *ReleaseUpsertBulk) SetReleaseDate(v time.Time) *ReleaseUpsertBulk {
	return u.Update(func(s *ReleaseUpsert) {
		s.SetReleaseDate(v)
	})
}

// UpdateReleaseDate sets the "release_date" field to the value that was provided on create.
func (u *ReleaseUpsertBulk) UpdateReleaseDate() *ReleaseUpsertBulk {
	return u.Update(func(s *ReleaseUpsert) {
		s.UpdateReleaseDate()
	})
}

// SetDescription sets the "description" field.
func (u *ReleaseUpsertBulk) SetDescription(v string) *ReleaseUpsertBulk {
	return u.Update(func(s *ReleaseUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ReleaseUpsertBulk) UpdateDescription() *ReleaseUpsertBulk {
	return u.Update(func(s *ReleaseUpsert) {
		s.UpdateDescription()
	})
}

// Exec executes the query.
func (u *ReleaseUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ReleaseCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ReleaseCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ReleaseUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
