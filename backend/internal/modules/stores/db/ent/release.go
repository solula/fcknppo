// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"waterfall-backend/internal/modules/stores/db/ent/release"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Release is the model entity for the Release schema.
type Release struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// ReleaseDate holds the value of the "release_date" field.
	ReleaseDate time.Time `json:"release_date,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ReleaseQuery when eager-loading is set.
	Edges        ReleaseEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ReleaseEdges holds the relations/edges for other nodes in the graph.
type ReleaseEdges struct {
	// Chapters holds the value of the chapters edge.
	Chapters []*Chapter `json:"chapters,omitempty"`
	// Parts holds the value of the parts edge.
	Parts []*Part `json:"parts,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ChaptersOrErr returns the Chapters value or an error if the edge
// was not loaded in eager-loading.
func (e ReleaseEdges) ChaptersOrErr() ([]*Chapter, error) {
	if e.loadedTypes[0] {
		return e.Chapters, nil
	}
	return nil, &NotLoadedError{edge: "chapters"}
}

// PartsOrErr returns the Parts value or an error if the edge
// was not loaded in eager-loading.
func (e ReleaseEdges) PartsOrErr() ([]*Part, error) {
	if e.loadedTypes[1] {
		return e.Parts, nil
	}
	return nil, &NotLoadedError{edge: "parts"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Release) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case release.FieldID, release.FieldDescription:
			values[i] = new(sql.NullString)
		case release.FieldCreatedAt, release.FieldUpdatedAt, release.FieldReleaseDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Release fields.
func (r *Release) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case release.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				r.ID = value.String
			}
		case release.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		case release.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				r.UpdatedAt = value.Time
			}
		case release.FieldReleaseDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field release_date", values[i])
			} else if value.Valid {
				r.ReleaseDate = value.Time
			}
		case release.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				r.Description = value.String
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Release.
// This includes values selected through modifiers, order, etc.
func (r *Release) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryChapters queries the "chapters" edge of the Release entity.
func (r *Release) QueryChapters() *ChapterQuery {
	return NewReleaseClient(r.config).QueryChapters(r)
}

// QueryParts queries the "parts" edge of the Release entity.
func (r *Release) QueryParts() *PartQuery {
	return NewReleaseClient(r.config).QueryParts(r)
}

// Update returns a builder for updating this Release.
// Note that you need to call Release.Unwrap() before calling this method if this Release
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Release) Update() *ReleaseUpdateOne {
	return NewReleaseClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Release entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Release) Unwrap() *Release {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Release is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Release) String() string {
	var builder strings.Builder
	builder.WriteString("Release(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(r.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("release_date=")
	builder.WriteString(r.ReleaseDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(r.Description)
	builder.WriteByte(')')
	return builder.String()
}

// Releases is a parsable slice of Release.
type Releases []*Release
