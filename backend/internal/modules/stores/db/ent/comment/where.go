// Code generated by ent, DO NOT EDIT.

package comment

import (
	"time"
	"waterfall-backend/internal/modules/stores/db/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Comment {
	return predicate.Comment(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Comment {
	return predicate.Comment(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldDeletedAt, v))
}

// Text applies equality check predicate on the "text" field. It's identical to TextEQ.
func Text(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldText, v))
}

// AuthorUUID applies equality check predicate on the "author_uuid" field. It's identical to AuthorUUIDEQ.
func AuthorUUID(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldAuthorUUID, v))
}

// ParentUUID applies equality check predicate on the "parent_uuid" field. It's identical to ParentUUIDEQ.
func ParentUUID(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldParentUUID, v))
}

// ChapterUUID applies equality check predicate on the "chapter_uuid" field. It's identical to ChapterUUIDEQ.
func ChapterUUID(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldChapterUUID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Comment {
	return predicate.Comment(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Comment {
	return predicate.Comment(sql.FieldNotNull(FieldDeletedAt))
}

// TextEQ applies the EQ predicate on the "text" field.
func TextEQ(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldText, v))
}

// TextNEQ applies the NEQ predicate on the "text" field.
func TextNEQ(v string) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldText, v))
}

// TextIn applies the In predicate on the "text" field.
func TextIn(vs ...string) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldText, vs...))
}

// TextNotIn applies the NotIn predicate on the "text" field.
func TextNotIn(vs ...string) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldText, vs...))
}

// TextGT applies the GT predicate on the "text" field.
func TextGT(v string) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldText, v))
}

// TextGTE applies the GTE predicate on the "text" field.
func TextGTE(v string) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldText, v))
}

// TextLT applies the LT predicate on the "text" field.
func TextLT(v string) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldText, v))
}

// TextLTE applies the LTE predicate on the "text" field.
func TextLTE(v string) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldText, v))
}

// TextContains applies the Contains predicate on the "text" field.
func TextContains(v string) predicate.Comment {
	return predicate.Comment(sql.FieldContains(FieldText, v))
}

// TextHasPrefix applies the HasPrefix predicate on the "text" field.
func TextHasPrefix(v string) predicate.Comment {
	return predicate.Comment(sql.FieldHasPrefix(FieldText, v))
}

// TextHasSuffix applies the HasSuffix predicate on the "text" field.
func TextHasSuffix(v string) predicate.Comment {
	return predicate.Comment(sql.FieldHasSuffix(FieldText, v))
}

// TextEqualFold applies the EqualFold predicate on the "text" field.
func TextEqualFold(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEqualFold(FieldText, v))
}

// TextContainsFold applies the ContainsFold predicate on the "text" field.
func TextContainsFold(v string) predicate.Comment {
	return predicate.Comment(sql.FieldContainsFold(FieldText, v))
}

// AuthorUUIDEQ applies the EQ predicate on the "author_uuid" field.
func AuthorUUIDEQ(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldAuthorUUID, v))
}

// AuthorUUIDNEQ applies the NEQ predicate on the "author_uuid" field.
func AuthorUUIDNEQ(v string) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldAuthorUUID, v))
}

// AuthorUUIDIn applies the In predicate on the "author_uuid" field.
func AuthorUUIDIn(vs ...string) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldAuthorUUID, vs...))
}

// AuthorUUIDNotIn applies the NotIn predicate on the "author_uuid" field.
func AuthorUUIDNotIn(vs ...string) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldAuthorUUID, vs...))
}

// AuthorUUIDGT applies the GT predicate on the "author_uuid" field.
func AuthorUUIDGT(v string) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldAuthorUUID, v))
}

// AuthorUUIDGTE applies the GTE predicate on the "author_uuid" field.
func AuthorUUIDGTE(v string) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldAuthorUUID, v))
}

// AuthorUUIDLT applies the LT predicate on the "author_uuid" field.
func AuthorUUIDLT(v string) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldAuthorUUID, v))
}

// AuthorUUIDLTE applies the LTE predicate on the "author_uuid" field.
func AuthorUUIDLTE(v string) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldAuthorUUID, v))
}

// AuthorUUIDContains applies the Contains predicate on the "author_uuid" field.
func AuthorUUIDContains(v string) predicate.Comment {
	return predicate.Comment(sql.FieldContains(FieldAuthorUUID, v))
}

// AuthorUUIDHasPrefix applies the HasPrefix predicate on the "author_uuid" field.
func AuthorUUIDHasPrefix(v string) predicate.Comment {
	return predicate.Comment(sql.FieldHasPrefix(FieldAuthorUUID, v))
}

// AuthorUUIDHasSuffix applies the HasSuffix predicate on the "author_uuid" field.
func AuthorUUIDHasSuffix(v string) predicate.Comment {
	return predicate.Comment(sql.FieldHasSuffix(FieldAuthorUUID, v))
}

// AuthorUUIDEqualFold applies the EqualFold predicate on the "author_uuid" field.
func AuthorUUIDEqualFold(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEqualFold(FieldAuthorUUID, v))
}

// AuthorUUIDContainsFold applies the ContainsFold predicate on the "author_uuid" field.
func AuthorUUIDContainsFold(v string) predicate.Comment {
	return predicate.Comment(sql.FieldContainsFold(FieldAuthorUUID, v))
}

// ParentUUIDEQ applies the EQ predicate on the "parent_uuid" field.
func ParentUUIDEQ(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldParentUUID, v))
}

// ParentUUIDNEQ applies the NEQ predicate on the "parent_uuid" field.
func ParentUUIDNEQ(v string) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldParentUUID, v))
}

// ParentUUIDIn applies the In predicate on the "parent_uuid" field.
func ParentUUIDIn(vs ...string) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldParentUUID, vs...))
}

// ParentUUIDNotIn applies the NotIn predicate on the "parent_uuid" field.
func ParentUUIDNotIn(vs ...string) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldParentUUID, vs...))
}

// ParentUUIDGT applies the GT predicate on the "parent_uuid" field.
func ParentUUIDGT(v string) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldParentUUID, v))
}

// ParentUUIDGTE applies the GTE predicate on the "parent_uuid" field.
func ParentUUIDGTE(v string) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldParentUUID, v))
}

// ParentUUIDLT applies the LT predicate on the "parent_uuid" field.
func ParentUUIDLT(v string) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldParentUUID, v))
}

// ParentUUIDLTE applies the LTE predicate on the "parent_uuid" field.
func ParentUUIDLTE(v string) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldParentUUID, v))
}

// ParentUUIDContains applies the Contains predicate on the "parent_uuid" field.
func ParentUUIDContains(v string) predicate.Comment {
	return predicate.Comment(sql.FieldContains(FieldParentUUID, v))
}

// ParentUUIDHasPrefix applies the HasPrefix predicate on the "parent_uuid" field.
func ParentUUIDHasPrefix(v string) predicate.Comment {
	return predicate.Comment(sql.FieldHasPrefix(FieldParentUUID, v))
}

// ParentUUIDHasSuffix applies the HasSuffix predicate on the "parent_uuid" field.
func ParentUUIDHasSuffix(v string) predicate.Comment {
	return predicate.Comment(sql.FieldHasSuffix(FieldParentUUID, v))
}

// ParentUUIDIsNil applies the IsNil predicate on the "parent_uuid" field.
func ParentUUIDIsNil() predicate.Comment {
	return predicate.Comment(sql.FieldIsNull(FieldParentUUID))
}

// ParentUUIDNotNil applies the NotNil predicate on the "parent_uuid" field.
func ParentUUIDNotNil() predicate.Comment {
	return predicate.Comment(sql.FieldNotNull(FieldParentUUID))
}

// ParentUUIDEqualFold applies the EqualFold predicate on the "parent_uuid" field.
func ParentUUIDEqualFold(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEqualFold(FieldParentUUID, v))
}

// ParentUUIDContainsFold applies the ContainsFold predicate on the "parent_uuid" field.
func ParentUUIDContainsFold(v string) predicate.Comment {
	return predicate.Comment(sql.FieldContainsFold(FieldParentUUID, v))
}

// ChapterUUIDEQ applies the EQ predicate on the "chapter_uuid" field.
func ChapterUUIDEQ(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldChapterUUID, v))
}

// ChapterUUIDNEQ applies the NEQ predicate on the "chapter_uuid" field.
func ChapterUUIDNEQ(v string) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldChapterUUID, v))
}

// ChapterUUIDIn applies the In predicate on the "chapter_uuid" field.
func ChapterUUIDIn(vs ...string) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldChapterUUID, vs...))
}

// ChapterUUIDNotIn applies the NotIn predicate on the "chapter_uuid" field.
func ChapterUUIDNotIn(vs ...string) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldChapterUUID, vs...))
}

// ChapterUUIDGT applies the GT predicate on the "chapter_uuid" field.
func ChapterUUIDGT(v string) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldChapterUUID, v))
}

// ChapterUUIDGTE applies the GTE predicate on the "chapter_uuid" field.
func ChapterUUIDGTE(v string) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldChapterUUID, v))
}

// ChapterUUIDLT applies the LT predicate on the "chapter_uuid" field.
func ChapterUUIDLT(v string) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldChapterUUID, v))
}

// ChapterUUIDLTE applies the LTE predicate on the "chapter_uuid" field.
func ChapterUUIDLTE(v string) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldChapterUUID, v))
}

// ChapterUUIDContains applies the Contains predicate on the "chapter_uuid" field.
func ChapterUUIDContains(v string) predicate.Comment {
	return predicate.Comment(sql.FieldContains(FieldChapterUUID, v))
}

// ChapterUUIDHasPrefix applies the HasPrefix predicate on the "chapter_uuid" field.
func ChapterUUIDHasPrefix(v string) predicate.Comment {
	return predicate.Comment(sql.FieldHasPrefix(FieldChapterUUID, v))
}

// ChapterUUIDHasSuffix applies the HasSuffix predicate on the "chapter_uuid" field.
func ChapterUUIDHasSuffix(v string) predicate.Comment {
	return predicate.Comment(sql.FieldHasSuffix(FieldChapterUUID, v))
}

// ChapterUUIDIsNil applies the IsNil predicate on the "chapter_uuid" field.
func ChapterUUIDIsNil() predicate.Comment {
	return predicate.Comment(sql.FieldIsNull(FieldChapterUUID))
}

// ChapterUUIDNotNil applies the NotNil predicate on the "chapter_uuid" field.
func ChapterUUIDNotNil() predicate.Comment {
	return predicate.Comment(sql.FieldNotNull(FieldChapterUUID))
}

// ChapterUUIDEqualFold applies the EqualFold predicate on the "chapter_uuid" field.
func ChapterUUIDEqualFold(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEqualFold(FieldChapterUUID, v))
}

// ChapterUUIDContainsFold applies the ContainsFold predicate on the "chapter_uuid" field.
func ChapterUUIDContainsFold(v string) predicate.Comment {
	return predicate.Comment(sql.FieldContainsFold(FieldChapterUUID, v))
}

// HasAuthor applies the HasEdge predicate on the "author" edge.
func HasAuthor() predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AuthorTable, AuthorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAuthorWith applies the HasEdge predicate on the "author" edge with a given conditions (other predicates).
func HasAuthorWith(preds ...predicate.User) predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		step := newAuthorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParent applies the HasEdge predicate on the "parent" edge.
func HasParent() predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentWith applies the HasEdge predicate on the "parent" edge with a given conditions (other predicates).
func HasParentWith(preds ...predicate.Comment) predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		step := newParentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChildren applies the HasEdge predicate on the "children" edge.
func HasChildren() predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChildrenTable, ChildrenColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChildrenWith applies the HasEdge predicate on the "children" edge with a given conditions (other predicates).
func HasChildrenWith(preds ...predicate.Comment) predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		step := newChildrenStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChapter applies the HasEdge predicate on the "chapter" edge.
func HasChapter() predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ChapterTable, ChapterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChapterWith applies the HasEdge predicate on the "chapter" edge with a given conditions (other predicates).
func HasChapterWith(preds ...predicate.Chapter) predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		step := newChapterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Comment) predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Comment) predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Comment) predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		p(s.Not())
	})
}
