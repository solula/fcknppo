// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"waterfall-backend/internal/models"
	"waterfall-backend/internal/models/files"
	"waterfall-backend/internal/modules/stores/db/ent/file"
	"waterfall-backend/internal/modules/stores/db/ent/predicate"
	"waterfall-backend/internal/modules/stores/db/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FileUpdate is the builder for updating File entities.
type FileUpdate struct {
	config
	hooks     []Hook
	mutation  *FileMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the FileUpdate builder.
func (fu *FileUpdate) Where(ps ...predicate.File) *FileUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetUpdatedAt sets the "updated_at" field.
func (fu *FileUpdate) SetUpdatedAt(t time.Time) *FileUpdate {
	fu.mutation.SetUpdatedAt(t)
	return fu
}

// SetFilename sets the "filename" field.
func (fu *FileUpdate) SetFilename(s string) *FileUpdate {
	fu.mutation.SetFilename(s)
	return fu
}

// SetMimeType sets the "mime_type" field.
func (fu *FileUpdate) SetMimeType(s string) *FileUpdate {
	fu.mutation.SetMimeType(s)
	return fu
}

// SetDescription sets the "description" field.
func (fu *FileUpdate) SetDescription(s string) *FileUpdate {
	fu.mutation.SetDescription(s)
	return fu
}

// SetCreatorUUID sets the "creator_uuid" field.
func (fu *FileUpdate) SetCreatorUUID(s string) *FileUpdate {
	fu.mutation.SetCreatorUUID(s)
	return fu
}

// SetNillableCreatorUUID sets the "creator_uuid" field if the given value is not nil.
func (fu *FileUpdate) SetNillableCreatorUUID(s *string) *FileUpdate {
	if s != nil {
		fu.SetCreatorUUID(*s)
	}
	return fu
}

// ClearCreatorUUID clears the value of the "creator_uuid" field.
func (fu *FileUpdate) ClearCreatorUUID() *FileUpdate {
	fu.mutation.ClearCreatorUUID()
	return fu
}

// SetObjectType sets the "object_type" field.
func (fu *FileUpdate) SetObjectType(mt models.ObjectType) *FileUpdate {
	fu.mutation.SetObjectType(mt)
	return fu
}

// SetObjectRef sets the "object_ref" field.
func (fu *FileUpdate) SetObjectRef(s string) *FileUpdate {
	fu.mutation.SetObjectRef(s)
	return fu
}

// SetType sets the "type" field.
func (fu *FileUpdate) SetType(f files.Type) *FileUpdate {
	fu.mutation.SetType(f)
	return fu
}

// SetTemp sets the "temp" field.
func (fu *FileUpdate) SetTemp(b bool) *FileUpdate {
	fu.mutation.SetTemp(b)
	return fu
}

// SetSequenceNumber sets the "sequence_number" field.
func (fu *FileUpdate) SetSequenceNumber(u uint) *FileUpdate {
	fu.mutation.ResetSequenceNumber()
	fu.mutation.SetSequenceNumber(u)
	return fu
}

// SetNillableSequenceNumber sets the "sequence_number" field if the given value is not nil.
func (fu *FileUpdate) SetNillableSequenceNumber(u *uint) *FileUpdate {
	if u != nil {
		fu.SetSequenceNumber(*u)
	}
	return fu
}

// AddSequenceNumber adds u to the "sequence_number" field.
func (fu *FileUpdate) AddSequenceNumber(u int) *FileUpdate {
	fu.mutation.AddSequenceNumber(u)
	return fu
}

// ClearSequenceNumber clears the value of the "sequence_number" field.
func (fu *FileUpdate) ClearSequenceNumber() *FileUpdate {
	fu.mutation.ClearSequenceNumber()
	return fu
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (fu *FileUpdate) SetCreatorID(id string) *FileUpdate {
	fu.mutation.SetCreatorID(id)
	return fu
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (fu *FileUpdate) SetNillableCreatorID(id *string) *FileUpdate {
	if id != nil {
		fu = fu.SetCreatorID(*id)
	}
	return fu
}

// SetCreator sets the "creator" edge to the User entity.
func (fu *FileUpdate) SetCreator(u *User) *FileUpdate {
	return fu.SetCreatorID(u.ID)
}

// Mutation returns the FileMutation object of the builder.
func (fu *FileUpdate) Mutation() *FileMutation {
	return fu.mutation
}

// ClearCreator clears the "creator" edge to the User entity.
func (fu *FileUpdate) ClearCreator() *FileUpdate {
	fu.mutation.ClearCreator()
	return fu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FileUpdate) Save(ctx context.Context) (int, error) {
	if err := fu.defaults(); err != nil {
		return 0, err
	}
	return withHooks[int, FileMutation](ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FileUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FileUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FileUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fu *FileUpdate) defaults() error {
	if _, ok := fu.mutation.UpdatedAt(); !ok {
		if file.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized file.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := file.UpdateDefaultUpdatedAt()
		fu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (fu *FileUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FileUpdate {
	fu.modifiers = append(fu.modifiers, modifiers...)
	return fu
}

func (fu *FileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(file.Table, file.Columns, sqlgraph.NewFieldSpec(file.FieldID, field.TypeString))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.UpdatedAt(); ok {
		_spec.SetField(file.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fu.mutation.Filename(); ok {
		_spec.SetField(file.FieldFilename, field.TypeString, value)
	}
	if value, ok := fu.mutation.MimeType(); ok {
		_spec.SetField(file.FieldMimeType, field.TypeString, value)
	}
	if value, ok := fu.mutation.Description(); ok {
		_spec.SetField(file.FieldDescription, field.TypeString, value)
	}
	if value, ok := fu.mutation.ObjectType(); ok {
		_spec.SetField(file.FieldObjectType, field.TypeString, value)
	}
	if value, ok := fu.mutation.ObjectRef(); ok {
		_spec.SetField(file.FieldObjectRef, field.TypeString, value)
	}
	if value, ok := fu.mutation.GetType(); ok {
		_spec.SetField(file.FieldType, field.TypeString, value)
	}
	if value, ok := fu.mutation.Temp(); ok {
		_spec.SetField(file.FieldTemp, field.TypeBool, value)
	}
	if value, ok := fu.mutation.SequenceNumber(); ok {
		_spec.SetField(file.FieldSequenceNumber, field.TypeUint, value)
	}
	if value, ok := fu.mutation.AddedSequenceNumber(); ok {
		_spec.AddField(file.FieldSequenceNumber, field.TypeUint, value)
	}
	if fu.mutation.SequenceNumberCleared() {
		_spec.ClearField(file.FieldSequenceNumber, field.TypeUint)
	}
	if fu.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   file.CreatorTable,
			Columns: []string{file.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   file.CreatorTable,
			Columns: []string{file.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(fu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{file.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FileUpdateOne is the builder for updating a single File entity.
type FileUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *FileMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (fuo *FileUpdateOne) SetUpdatedAt(t time.Time) *FileUpdateOne {
	fuo.mutation.SetUpdatedAt(t)
	return fuo
}

// SetFilename sets the "filename" field.
func (fuo *FileUpdateOne) SetFilename(s string) *FileUpdateOne {
	fuo.mutation.SetFilename(s)
	return fuo
}

// SetMimeType sets the "mime_type" field.
func (fuo *FileUpdateOne) SetMimeType(s string) *FileUpdateOne {
	fuo.mutation.SetMimeType(s)
	return fuo
}

// SetDescription sets the "description" field.
func (fuo *FileUpdateOne) SetDescription(s string) *FileUpdateOne {
	fuo.mutation.SetDescription(s)
	return fuo
}

// SetCreatorUUID sets the "creator_uuid" field.
func (fuo *FileUpdateOne) SetCreatorUUID(s string) *FileUpdateOne {
	fuo.mutation.SetCreatorUUID(s)
	return fuo
}

// SetNillableCreatorUUID sets the "creator_uuid" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableCreatorUUID(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetCreatorUUID(*s)
	}
	return fuo
}

// ClearCreatorUUID clears the value of the "creator_uuid" field.
func (fuo *FileUpdateOne) ClearCreatorUUID() *FileUpdateOne {
	fuo.mutation.ClearCreatorUUID()
	return fuo
}

// SetObjectType sets the "object_type" field.
func (fuo *FileUpdateOne) SetObjectType(mt models.ObjectType) *FileUpdateOne {
	fuo.mutation.SetObjectType(mt)
	return fuo
}

// SetObjectRef sets the "object_ref" field.
func (fuo *FileUpdateOne) SetObjectRef(s string) *FileUpdateOne {
	fuo.mutation.SetObjectRef(s)
	return fuo
}

// SetType sets the "type" field.
func (fuo *FileUpdateOne) SetType(f files.Type) *FileUpdateOne {
	fuo.mutation.SetType(f)
	return fuo
}

// SetTemp sets the "temp" field.
func (fuo *FileUpdateOne) SetTemp(b bool) *FileUpdateOne {
	fuo.mutation.SetTemp(b)
	return fuo
}

// SetSequenceNumber sets the "sequence_number" field.
func (fuo *FileUpdateOne) SetSequenceNumber(u uint) *FileUpdateOne {
	fuo.mutation.ResetSequenceNumber()
	fuo.mutation.SetSequenceNumber(u)
	return fuo
}

// SetNillableSequenceNumber sets the "sequence_number" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableSequenceNumber(u *uint) *FileUpdateOne {
	if u != nil {
		fuo.SetSequenceNumber(*u)
	}
	return fuo
}

// AddSequenceNumber adds u to the "sequence_number" field.
func (fuo *FileUpdateOne) AddSequenceNumber(u int) *FileUpdateOne {
	fuo.mutation.AddSequenceNumber(u)
	return fuo
}

// ClearSequenceNumber clears the value of the "sequence_number" field.
func (fuo *FileUpdateOne) ClearSequenceNumber() *FileUpdateOne {
	fuo.mutation.ClearSequenceNumber()
	return fuo
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (fuo *FileUpdateOne) SetCreatorID(id string) *FileUpdateOne {
	fuo.mutation.SetCreatorID(id)
	return fuo
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableCreatorID(id *string) *FileUpdateOne {
	if id != nil {
		fuo = fuo.SetCreatorID(*id)
	}
	return fuo
}

// SetCreator sets the "creator" edge to the User entity.
func (fuo *FileUpdateOne) SetCreator(u *User) *FileUpdateOne {
	return fuo.SetCreatorID(u.ID)
}

// Mutation returns the FileMutation object of the builder.
func (fuo *FileUpdateOne) Mutation() *FileMutation {
	return fuo.mutation
}

// ClearCreator clears the "creator" edge to the User entity.
func (fuo *FileUpdateOne) ClearCreator() *FileUpdateOne {
	fuo.mutation.ClearCreator()
	return fuo
}

// Where appends a list predicates to the FileUpdate builder.
func (fuo *FileUpdateOne) Where(ps ...predicate.File) *FileUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FileUpdateOne) Select(field string, fields ...string) *FileUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated File entity.
func (fuo *FileUpdateOne) Save(ctx context.Context) (*File, error) {
	if err := fuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks[*File, FileMutation](ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FileUpdateOne) SaveX(ctx context.Context) *File {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FileUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FileUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fuo *FileUpdateOne) defaults() error {
	if _, ok := fuo.mutation.UpdatedAt(); !ok {
		if file.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized file.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := file.UpdateDefaultUpdatedAt()
		fuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (fuo *FileUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FileUpdateOne {
	fuo.modifiers = append(fuo.modifiers, modifiers...)
	return fuo
}

func (fuo *FileUpdateOne) sqlSave(ctx context.Context) (_node *File, err error) {
	_spec := sqlgraph.NewUpdateSpec(file.Table, file.Columns, sqlgraph.NewFieldSpec(file.FieldID, field.TypeString))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "File.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, file.FieldID)
		for _, f := range fields {
			if !file.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != file.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.UpdatedAt(); ok {
		_spec.SetField(file.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fuo.mutation.Filename(); ok {
		_spec.SetField(file.FieldFilename, field.TypeString, value)
	}
	if value, ok := fuo.mutation.MimeType(); ok {
		_spec.SetField(file.FieldMimeType, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Description(); ok {
		_spec.SetField(file.FieldDescription, field.TypeString, value)
	}
	if value, ok := fuo.mutation.ObjectType(); ok {
		_spec.SetField(file.FieldObjectType, field.TypeString, value)
	}
	if value, ok := fuo.mutation.ObjectRef(); ok {
		_spec.SetField(file.FieldObjectRef, field.TypeString, value)
	}
	if value, ok := fuo.mutation.GetType(); ok {
		_spec.SetField(file.FieldType, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Temp(); ok {
		_spec.SetField(file.FieldTemp, field.TypeBool, value)
	}
	if value, ok := fuo.mutation.SequenceNumber(); ok {
		_spec.SetField(file.FieldSequenceNumber, field.TypeUint, value)
	}
	if value, ok := fuo.mutation.AddedSequenceNumber(); ok {
		_spec.AddField(file.FieldSequenceNumber, field.TypeUint, value)
	}
	if fuo.mutation.SequenceNumberCleared() {
		_spec.ClearField(file.FieldSequenceNumber, field.TypeUint)
	}
	if fuo.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   file.CreatorTable,
			Columns: []string{file.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   file.CreatorTable,
			Columns: []string{file.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(fuo.modifiers...)
	_node = &File{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{file.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
