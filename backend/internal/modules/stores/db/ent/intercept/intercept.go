// Code generated by ent, DO NOT EDIT.

package intercept

import (
	"context"
	"fmt"
	"waterfall-backend/internal/modules/stores/db/ent"
	"waterfall-backend/internal/modules/stores/db/ent/chapter"
	"waterfall-backend/internal/modules/stores/db/ent/chaptertext"
	"waterfall-backend/internal/modules/stores/db/ent/comment"
	"waterfall-backend/internal/modules/stores/db/ent/file"
	"waterfall-backend/internal/modules/stores/db/ent/migrations"
	"waterfall-backend/internal/modules/stores/db/ent/part"
	"waterfall-backend/internal/modules/stores/db/ent/permission"
	"waterfall-backend/internal/modules/stores/db/ent/predicate"
	"waterfall-backend/internal/modules/stores/db/ent/release"
	"waterfall-backend/internal/modules/stores/db/ent/role"
	"waterfall-backend/internal/modules/stores/db/ent/seedmigrations"
	"waterfall-backend/internal/modules/stores/db/ent/user"

	"entgo.io/ent/dialect/sql"
)

// The Query interface represents an operation that queries a graph.
// By using this interface, users can write generic code that manipulates
// query builders of different types.
type Query interface {
	// Type returns the string representation of the query type.
	Type() string
	// Limit the number of records to be returned by this query.
	Limit(int)
	// Offset to start from.
	Offset(int)
	// Unique configures the query builder to filter duplicate records.
	Unique(bool)
	// Order specifies how the records should be ordered.
	Order(...func(*sql.Selector))
	// WhereP appends storage-level predicates to the query builder. Using this method, users
	// can use type-assertion to append predicates that do not depend on any generated package.
	WhereP(...func(*sql.Selector))
}

// The Func type is an adapter that allows ordinary functions to be used as interceptors.
// Unlike traversal functions, interceptors are skipped during graph traversals. Note that the
// implementation of Func is different from the one defined in entgo.io/ent.InterceptFunc.
type Func func(context.Context, Query) error

// Intercept calls f(ctx, q) and then applied the next Querier.
func (f Func) Intercept(next ent.Querier) ent.Querier {
	return ent.QuerierFunc(func(ctx context.Context, q ent.Query) (ent.Value, error) {
		query, err := NewQuery(q)
		if err != nil {
			return nil, err
		}
		if err := f(ctx, query); err != nil {
			return nil, err
		}
		return next.Query(ctx, q)
	})
}

// The TraverseFunc type is an adapter to allow the use of ordinary function as Traverser.
// If f is a function with the appropriate signature, TraverseFunc(f) is a Traverser that calls f.
type TraverseFunc func(context.Context, Query) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseFunc) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseFunc) Traverse(ctx context.Context, q ent.Query) error {
	query, err := NewQuery(q)
	if err != nil {
		return err
	}
	return f(ctx, query)
}

// The ChapterFunc type is an adapter to allow the use of ordinary function as a Querier.
type ChapterFunc func(context.Context, *ent.ChapterQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ChapterFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ChapterQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ChapterQuery", q)
}

// The TraverseChapter type is an adapter to allow the use of ordinary function as Traverser.
type TraverseChapter func(context.Context, *ent.ChapterQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseChapter) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseChapter) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ChapterQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ChapterQuery", q)
}

// The ChapterTextFunc type is an adapter to allow the use of ordinary function as a Querier.
type ChapterTextFunc func(context.Context, *ent.ChapterTextQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ChapterTextFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ChapterTextQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ChapterTextQuery", q)
}

// The TraverseChapterText type is an adapter to allow the use of ordinary function as Traverser.
type TraverseChapterText func(context.Context, *ent.ChapterTextQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseChapterText) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseChapterText) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ChapterTextQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ChapterTextQuery", q)
}

// The CommentFunc type is an adapter to allow the use of ordinary function as a Querier.
type CommentFunc func(context.Context, *ent.CommentQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f CommentFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.CommentQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.CommentQuery", q)
}

// The TraverseComment type is an adapter to allow the use of ordinary function as Traverser.
type TraverseComment func(context.Context, *ent.CommentQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseComment) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseComment) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CommentQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.CommentQuery", q)
}

// The FileFunc type is an adapter to allow the use of ordinary function as a Querier.
type FileFunc func(context.Context, *ent.FileQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f FileFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.FileQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.FileQuery", q)
}

// The TraverseFile type is an adapter to allow the use of ordinary function as Traverser.
type TraverseFile func(context.Context, *ent.FileQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseFile) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseFile) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.FileQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.FileQuery", q)
}

// The MigrationsFunc type is an adapter to allow the use of ordinary function as a Querier.
type MigrationsFunc func(context.Context, *ent.MigrationsQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f MigrationsFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.MigrationsQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.MigrationsQuery", q)
}

// The TraverseMigrations type is an adapter to allow the use of ordinary function as Traverser.
type TraverseMigrations func(context.Context, *ent.MigrationsQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseMigrations) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseMigrations) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.MigrationsQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.MigrationsQuery", q)
}

// The PartFunc type is an adapter to allow the use of ordinary function as a Querier.
type PartFunc func(context.Context, *ent.PartQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f PartFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.PartQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.PartQuery", q)
}

// The TraversePart type is an adapter to allow the use of ordinary function as Traverser.
type TraversePart func(context.Context, *ent.PartQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraversePart) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraversePart) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PartQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.PartQuery", q)
}

// The PermissionFunc type is an adapter to allow the use of ordinary function as a Querier.
type PermissionFunc func(context.Context, *ent.PermissionQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f PermissionFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.PermissionQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.PermissionQuery", q)
}

// The TraversePermission type is an adapter to allow the use of ordinary function as Traverser.
type TraversePermission func(context.Context, *ent.PermissionQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraversePermission) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraversePermission) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PermissionQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.PermissionQuery", q)
}

// The ReleaseFunc type is an adapter to allow the use of ordinary function as a Querier.
type ReleaseFunc func(context.Context, *ent.ReleaseQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ReleaseFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ReleaseQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ReleaseQuery", q)
}

// The TraverseRelease type is an adapter to allow the use of ordinary function as Traverser.
type TraverseRelease func(context.Context, *ent.ReleaseQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseRelease) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseRelease) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ReleaseQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ReleaseQuery", q)
}

// The RoleFunc type is an adapter to allow the use of ordinary function as a Querier.
type RoleFunc func(context.Context, *ent.RoleQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f RoleFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.RoleQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.RoleQuery", q)
}

// The TraverseRole type is an adapter to allow the use of ordinary function as Traverser.
type TraverseRole func(context.Context, *ent.RoleQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseRole) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseRole) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.RoleQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.RoleQuery", q)
}

// The SeedMigrationsFunc type is an adapter to allow the use of ordinary function as a Querier.
type SeedMigrationsFunc func(context.Context, *ent.SeedMigrationsQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f SeedMigrationsFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.SeedMigrationsQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.SeedMigrationsQuery", q)
}

// The TraverseSeedMigrations type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSeedMigrations func(context.Context, *ent.SeedMigrationsQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSeedMigrations) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSeedMigrations) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SeedMigrationsQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.SeedMigrationsQuery", q)
}

// The UserFunc type is an adapter to allow the use of ordinary function as a Querier.
type UserFunc func(context.Context, *ent.UserQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UserFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UserQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UserQuery", q)
}

// The TraverseUser type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUser func(context.Context, *ent.UserQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUser) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUser) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UserQuery", q)
}

// NewQuery returns the generic Query interface for the given typed query.
func NewQuery(q ent.Query) (Query, error) {
	switch q := q.(type) {
	case *ent.ChapterQuery:
		return &query[*ent.ChapterQuery, predicate.Chapter, chapter.Order]{typ: ent.TypeChapter, tq: q}, nil
	case *ent.ChapterTextQuery:
		return &query[*ent.ChapterTextQuery, predicate.ChapterText, chaptertext.Order]{typ: ent.TypeChapterText, tq: q}, nil
	case *ent.CommentQuery:
		return &query[*ent.CommentQuery, predicate.Comment, comment.Order]{typ: ent.TypeComment, tq: q}, nil
	case *ent.FileQuery:
		return &query[*ent.FileQuery, predicate.File, file.Order]{typ: ent.TypeFile, tq: q}, nil
	case *ent.MigrationsQuery:
		return &query[*ent.MigrationsQuery, predicate.Migrations, migrations.Order]{typ: ent.TypeMigrations, tq: q}, nil
	case *ent.PartQuery:
		return &query[*ent.PartQuery, predicate.Part, part.Order]{typ: ent.TypePart, tq: q}, nil
	case *ent.PermissionQuery:
		return &query[*ent.PermissionQuery, predicate.Permission, permission.Order]{typ: ent.TypePermission, tq: q}, nil
	case *ent.ReleaseQuery:
		return &query[*ent.ReleaseQuery, predicate.Release, release.Order]{typ: ent.TypeRelease, tq: q}, nil
	case *ent.RoleQuery:
		return &query[*ent.RoleQuery, predicate.Role, role.Order]{typ: ent.TypeRole, tq: q}, nil
	case *ent.SeedMigrationsQuery:
		return &query[*ent.SeedMigrationsQuery, predicate.SeedMigrations, seedmigrations.Order]{typ: ent.TypeSeedMigrations, tq: q}, nil
	case *ent.UserQuery:
		return &query[*ent.UserQuery, predicate.User, user.Order]{typ: ent.TypeUser, tq: q}, nil
	default:
		return nil, fmt.Errorf("unknown query type %T", q)
	}
}

type query[T any, P ~func(*sql.Selector), R ~func(*sql.Selector)] struct {
	typ string
	tq  interface {
		Limit(int) T
		Offset(int) T
		Unique(bool) T
		Order(...R) T
		Where(...P) T
	}
}

func (q query[T, P, R]) Type() string {
	return q.typ
}

func (q query[T, P, R]) Limit(limit int) {
	q.tq.Limit(limit)
}

func (q query[T, P, R]) Offset(offset int) {
	q.tq.Offset(offset)
}

func (q query[T, P, R]) Unique(unique bool) {
	q.tq.Unique(unique)
}

func (q query[T, P, R]) Order(orders ...func(*sql.Selector)) {
	rs := make([]R, len(orders))
	for i := range orders {
		rs[i] = orders[i]
	}
	q.tq.Order(rs...)
}

func (q query[T, P, R]) WhereP(ps ...func(*sql.Selector)) {
	p := make([]P, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	q.tq.Where(p...)
}
