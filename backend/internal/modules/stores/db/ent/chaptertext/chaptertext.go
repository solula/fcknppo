// Code generated by ent, DO NOT EDIT.

package chaptertext

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the chaptertext type in the database.
	Label = "chapter_text"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "uuid"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldChapterUUID holds the string denoting the chapter_uuid field in the database.
	FieldChapterUUID = "chapter_uuid"
	// FieldText holds the string denoting the text field in the database.
	FieldText = "text"
	// EdgeChapter holds the string denoting the chapter edge name in mutations.
	EdgeChapter = "chapter"
	// Table holds the table name of the chaptertext in the database.
	Table = "chapter_texts"
	// ChapterTable is the table that holds the chapter relation/edge.
	ChapterTable = "chapter_texts"
	// ChapterInverseTable is the table name for the Chapter entity.
	// It exists in this package in order to avoid circular dependency with the "chapter" package.
	ChapterInverseTable = "chapters"
	// ChapterColumn is the table column denoting the chapter relation/edge.
	ChapterColumn = "chapter_uuid"
)

// Columns holds all SQL columns for chaptertext fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldChapterUUID,
	FieldText,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "waterfall-backend/internal/modules/stores/db/ent/runtime"
var (
	Hooks        [2]ent.Hook
	Interceptors [1]ent.Interceptor
	Policy       ent.Policy
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// Order defines the ordering method for the ChapterText queries.
type Order func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByChapterUUID orders the results by the chapter_uuid field.
func ByChapterUUID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldChapterUUID, opts...).ToFunc()
}

// ByText orders the results by the text field.
func ByText(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldText, opts...).ToFunc()
}

// ByChapterField orders the results by chapter field.
func ByChapterField(field string, opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChapterStep(), sql.OrderByField(field, opts...))
	}
}
func newChapterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ChapterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, ChapterTable, ChapterColumn),
	)
}
