// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"waterfall-backend/internal/modules/stores/db/ent/chapter"
	"waterfall-backend/internal/modules/stores/db/ent/part"
	"waterfall-backend/internal/modules/stores/db/ent/predicate"
	"waterfall-backend/internal/modules/stores/db/ent/release"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ReleaseUpdate is the builder for updating Release entities.
type ReleaseUpdate struct {
	config
	hooks     []Hook
	mutation  *ReleaseMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ReleaseUpdate builder.
func (ru *ReleaseUpdate) Where(ps ...predicate.Release) *ReleaseUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *ReleaseUpdate) SetUpdatedAt(t time.Time) *ReleaseUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// SetReleaseDate sets the "release_date" field.
func (ru *ReleaseUpdate) SetReleaseDate(t time.Time) *ReleaseUpdate {
	ru.mutation.SetReleaseDate(t)
	return ru
}

// SetDescription sets the "description" field.
func (ru *ReleaseUpdate) SetDescription(s string) *ReleaseUpdate {
	ru.mutation.SetDescription(s)
	return ru
}

// AddChapterIDs adds the "chapters" edge to the Chapter entity by IDs.
func (ru *ReleaseUpdate) AddChapterIDs(ids ...string) *ReleaseUpdate {
	ru.mutation.AddChapterIDs(ids...)
	return ru
}

// AddChapters adds the "chapters" edges to the Chapter entity.
func (ru *ReleaseUpdate) AddChapters(c ...*Chapter) *ReleaseUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ru.AddChapterIDs(ids...)
}

// AddPartIDs adds the "parts" edge to the Part entity by IDs.
func (ru *ReleaseUpdate) AddPartIDs(ids ...string) *ReleaseUpdate {
	ru.mutation.AddPartIDs(ids...)
	return ru
}

// AddParts adds the "parts" edges to the Part entity.
func (ru *ReleaseUpdate) AddParts(p ...*Part) *ReleaseUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ru.AddPartIDs(ids...)
}

// Mutation returns the ReleaseMutation object of the builder.
func (ru *ReleaseUpdate) Mutation() *ReleaseMutation {
	return ru.mutation
}

// ClearChapters clears all "chapters" edges to the Chapter entity.
func (ru *ReleaseUpdate) ClearChapters() *ReleaseUpdate {
	ru.mutation.ClearChapters()
	return ru
}

// RemoveChapterIDs removes the "chapters" edge to Chapter entities by IDs.
func (ru *ReleaseUpdate) RemoveChapterIDs(ids ...string) *ReleaseUpdate {
	ru.mutation.RemoveChapterIDs(ids...)
	return ru
}

// RemoveChapters removes "chapters" edges to Chapter entities.
func (ru *ReleaseUpdate) RemoveChapters(c ...*Chapter) *ReleaseUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ru.RemoveChapterIDs(ids...)
}

// ClearParts clears all "parts" edges to the Part entity.
func (ru *ReleaseUpdate) ClearParts() *ReleaseUpdate {
	ru.mutation.ClearParts()
	return ru
}

// RemovePartIDs removes the "parts" edge to Part entities by IDs.
func (ru *ReleaseUpdate) RemovePartIDs(ids ...string) *ReleaseUpdate {
	ru.mutation.RemovePartIDs(ids...)
	return ru
}

// RemoveParts removes "parts" edges to Part entities.
func (ru *ReleaseUpdate) RemoveParts(p ...*Part) *ReleaseUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ru.RemovePartIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *ReleaseUpdate) Save(ctx context.Context) (int, error) {
	if err := ru.defaults(); err != nil {
		return 0, err
	}
	return withHooks[int, ReleaseMutation](ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *ReleaseUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *ReleaseUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *ReleaseUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *ReleaseUpdate) defaults() error {
	if _, ok := ru.mutation.UpdatedAt(); !ok {
		if release.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized release.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := release.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ru *ReleaseUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ReleaseUpdate {
	ru.modifiers = append(ru.modifiers, modifiers...)
	return ru
}

func (ru *ReleaseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(release.Table, release.Columns, sqlgraph.NewFieldSpec(release.FieldID, field.TypeString))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(release.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.ReleaseDate(); ok {
		_spec.SetField(release.FieldReleaseDate, field.TypeTime, value)
	}
	if value, ok := ru.mutation.Description(); ok {
		_spec.SetField(release.FieldDescription, field.TypeString, value)
	}
	if ru.mutation.ChaptersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   release.ChaptersTable,
			Columns: []string{release.ChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chapter.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedChaptersIDs(); len(nodes) > 0 && !ru.mutation.ChaptersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   release.ChaptersTable,
			Columns: []string{release.ChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chapter.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ChaptersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   release.ChaptersTable,
			Columns: []string{release.ChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chapter.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.PartsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   release.PartsTable,
			Columns: []string{release.PartsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(part.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedPartsIDs(); len(nodes) > 0 && !ru.mutation.PartsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   release.PartsTable,
			Columns: []string{release.PartsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(part.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.PartsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   release.PartsTable,
			Columns: []string{release.PartsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(part.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{release.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// ReleaseUpdateOne is the builder for updating a single Release entity.
type ReleaseUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ReleaseMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *ReleaseUpdateOne) SetUpdatedAt(t time.Time) *ReleaseUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// SetReleaseDate sets the "release_date" field.
func (ruo *ReleaseUpdateOne) SetReleaseDate(t time.Time) *ReleaseUpdateOne {
	ruo.mutation.SetReleaseDate(t)
	return ruo
}

// SetDescription sets the "description" field.
func (ruo *ReleaseUpdateOne) SetDescription(s string) *ReleaseUpdateOne {
	ruo.mutation.SetDescription(s)
	return ruo
}

// AddChapterIDs adds the "chapters" edge to the Chapter entity by IDs.
func (ruo *ReleaseUpdateOne) AddChapterIDs(ids ...string) *ReleaseUpdateOne {
	ruo.mutation.AddChapterIDs(ids...)
	return ruo
}

// AddChapters adds the "chapters" edges to the Chapter entity.
func (ruo *ReleaseUpdateOne) AddChapters(c ...*Chapter) *ReleaseUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ruo.AddChapterIDs(ids...)
}

// AddPartIDs adds the "parts" edge to the Part entity by IDs.
func (ruo *ReleaseUpdateOne) AddPartIDs(ids ...string) *ReleaseUpdateOne {
	ruo.mutation.AddPartIDs(ids...)
	return ruo
}

// AddParts adds the "parts" edges to the Part entity.
func (ruo *ReleaseUpdateOne) AddParts(p ...*Part) *ReleaseUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ruo.AddPartIDs(ids...)
}

// Mutation returns the ReleaseMutation object of the builder.
func (ruo *ReleaseUpdateOne) Mutation() *ReleaseMutation {
	return ruo.mutation
}

// ClearChapters clears all "chapters" edges to the Chapter entity.
func (ruo *ReleaseUpdateOne) ClearChapters() *ReleaseUpdateOne {
	ruo.mutation.ClearChapters()
	return ruo
}

// RemoveChapterIDs removes the "chapters" edge to Chapter entities by IDs.
func (ruo *ReleaseUpdateOne) RemoveChapterIDs(ids ...string) *ReleaseUpdateOne {
	ruo.mutation.RemoveChapterIDs(ids...)
	return ruo
}

// RemoveChapters removes "chapters" edges to Chapter entities.
func (ruo *ReleaseUpdateOne) RemoveChapters(c ...*Chapter) *ReleaseUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ruo.RemoveChapterIDs(ids...)
}

// ClearParts clears all "parts" edges to the Part entity.
func (ruo *ReleaseUpdateOne) ClearParts() *ReleaseUpdateOne {
	ruo.mutation.ClearParts()
	return ruo
}

// RemovePartIDs removes the "parts" edge to Part entities by IDs.
func (ruo *ReleaseUpdateOne) RemovePartIDs(ids ...string) *ReleaseUpdateOne {
	ruo.mutation.RemovePartIDs(ids...)
	return ruo
}

// RemoveParts removes "parts" edges to Part entities.
func (ruo *ReleaseUpdateOne) RemoveParts(p ...*Part) *ReleaseUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ruo.RemovePartIDs(ids...)
}

// Where appends a list predicates to the ReleaseUpdate builder.
func (ruo *ReleaseUpdateOne) Where(ps ...predicate.Release) *ReleaseUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *ReleaseUpdateOne) Select(field string, fields ...string) *ReleaseUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Release entity.
func (ruo *ReleaseUpdateOne) Save(ctx context.Context) (*Release, error) {
	if err := ruo.defaults(); err != nil {
		return nil, err
	}
	return withHooks[*Release, ReleaseMutation](ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *ReleaseUpdateOne) SaveX(ctx context.Context) *Release {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *ReleaseUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *ReleaseUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *ReleaseUpdateOne) defaults() error {
	if _, ok := ruo.mutation.UpdatedAt(); !ok {
		if release.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized release.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := release.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ruo *ReleaseUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ReleaseUpdateOne {
	ruo.modifiers = append(ruo.modifiers, modifiers...)
	return ruo
}

func (ruo *ReleaseUpdateOne) sqlSave(ctx context.Context) (_node *Release, err error) {
	_spec := sqlgraph.NewUpdateSpec(release.Table, release.Columns, sqlgraph.NewFieldSpec(release.FieldID, field.TypeString))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Release.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, release.FieldID)
		for _, f := range fields {
			if !release.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != release.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(release.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.ReleaseDate(); ok {
		_spec.SetField(release.FieldReleaseDate, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.Description(); ok {
		_spec.SetField(release.FieldDescription, field.TypeString, value)
	}
	if ruo.mutation.ChaptersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   release.ChaptersTable,
			Columns: []string{release.ChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chapter.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedChaptersIDs(); len(nodes) > 0 && !ruo.mutation.ChaptersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   release.ChaptersTable,
			Columns: []string{release.ChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chapter.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ChaptersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   release.ChaptersTable,
			Columns: []string{release.ChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chapter.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.PartsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   release.PartsTable,
			Columns: []string{release.PartsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(part.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedPartsIDs(); len(nodes) > 0 && !ruo.mutation.PartsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   release.PartsTable,
			Columns: []string{release.PartsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(part.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.PartsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   release.PartsTable,
			Columns: []string{release.PartsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(part.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ruo.modifiers...)
	_node = &Release{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{release.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
