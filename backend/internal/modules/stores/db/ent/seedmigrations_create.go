// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"waterfall-backend/internal/modules/stores/db/ent/seedmigrations"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SeedMigrationsCreate is the builder for creating a SeedMigrations entity.
type SeedMigrationsCreate struct {
	config
	mutation *SeedMigrationsMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetMigrated sets the "migrated" field.
func (smc *SeedMigrationsCreate) SetMigrated(i int) *SeedMigrationsCreate {
	smc.mutation.SetMigrated(i)
	return smc
}

// Mutation returns the SeedMigrationsMutation object of the builder.
func (smc *SeedMigrationsCreate) Mutation() *SeedMigrationsMutation {
	return smc.mutation
}

// Save creates the SeedMigrations in the database.
func (smc *SeedMigrationsCreate) Save(ctx context.Context) (*SeedMigrations, error) {
	return withHooks[*SeedMigrations, SeedMigrationsMutation](ctx, smc.sqlSave, smc.mutation, smc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (smc *SeedMigrationsCreate) SaveX(ctx context.Context) *SeedMigrations {
	v, err := smc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (smc *SeedMigrationsCreate) Exec(ctx context.Context) error {
	_, err := smc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smc *SeedMigrationsCreate) ExecX(ctx context.Context) {
	if err := smc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (smc *SeedMigrationsCreate) check() error {
	if _, ok := smc.mutation.Migrated(); !ok {
		return &ValidationError{Name: "migrated", err: errors.New(`ent: missing required field "SeedMigrations.migrated"`)}
	}
	return nil
}

func (smc *SeedMigrationsCreate) sqlSave(ctx context.Context) (*SeedMigrations, error) {
	if err := smc.check(); err != nil {
		return nil, err
	}
	_node, _spec := smc.createSpec()
	if err := sqlgraph.CreateNode(ctx, smc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	smc.mutation.id = &_node.ID
	smc.mutation.done = true
	return _node, nil
}

func (smc *SeedMigrationsCreate) createSpec() (*SeedMigrations, *sqlgraph.CreateSpec) {
	var (
		_node = &SeedMigrations{config: smc.config}
		_spec = sqlgraph.NewCreateSpec(seedmigrations.Table, sqlgraph.NewFieldSpec(seedmigrations.FieldID, field.TypeInt))
	)
	_spec.OnConflict = smc.conflict
	if value, ok := smc.mutation.Migrated(); ok {
		_spec.SetField(seedmigrations.FieldMigrated, field.TypeInt, value)
		_node.Migrated = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SeedMigrations.Create().
//		SetMigrated(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SeedMigrationsUpsert) {
//			SetMigrated(v+v).
//		}).
//		Exec(ctx)
func (smc *SeedMigrationsCreate) OnConflict(opts ...sql.ConflictOption) *SeedMigrationsUpsertOne {
	smc.conflict = opts
	return &SeedMigrationsUpsertOne{
		create: smc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SeedMigrations.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (smc *SeedMigrationsCreate) OnConflictColumns(columns ...string) *SeedMigrationsUpsertOne {
	smc.conflict = append(smc.conflict, sql.ConflictColumns(columns...))
	return &SeedMigrationsUpsertOne{
		create: smc,
	}
}

type (
	// SeedMigrationsUpsertOne is the builder for "upsert"-ing
	//  one SeedMigrations node.
	SeedMigrationsUpsertOne struct {
		create *SeedMigrationsCreate
	}

	// SeedMigrationsUpsert is the "OnConflict" setter.
	SeedMigrationsUpsert struct {
		*sql.UpdateSet
	}
)

// SetMigrated sets the "migrated" field.
func (u *SeedMigrationsUpsert) SetMigrated(v int) *SeedMigrationsUpsert {
	u.Set(seedmigrations.FieldMigrated, v)
	return u
}

// UpdateMigrated sets the "migrated" field to the value that was provided on create.
func (u *SeedMigrationsUpsert) UpdateMigrated() *SeedMigrationsUpsert {
	u.SetExcluded(seedmigrations.FieldMigrated)
	return u
}

// AddMigrated adds v to the "migrated" field.
func (u *SeedMigrationsUpsert) AddMigrated(v int) *SeedMigrationsUpsert {
	u.Add(seedmigrations.FieldMigrated, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.SeedMigrations.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SeedMigrationsUpsertOne) UpdateNewValues() *SeedMigrationsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SeedMigrations.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SeedMigrationsUpsertOne) Ignore() *SeedMigrationsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SeedMigrationsUpsertOne) DoNothing() *SeedMigrationsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SeedMigrationsCreate.OnConflict
// documentation for more info.
func (u *SeedMigrationsUpsertOne) Update(set func(*SeedMigrationsUpsert)) *SeedMigrationsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SeedMigrationsUpsert{UpdateSet: update})
	}))
	return u
}

// SetMigrated sets the "migrated" field.
func (u *SeedMigrationsUpsertOne) SetMigrated(v int) *SeedMigrationsUpsertOne {
	return u.Update(func(s *SeedMigrationsUpsert) {
		s.SetMigrated(v)
	})
}

// AddMigrated adds v to the "migrated" field.
func (u *SeedMigrationsUpsertOne) AddMigrated(v int) *SeedMigrationsUpsertOne {
	return u.Update(func(s *SeedMigrationsUpsert) {
		s.AddMigrated(v)
	})
}

// UpdateMigrated sets the "migrated" field to the value that was provided on create.
func (u *SeedMigrationsUpsertOne) UpdateMigrated() *SeedMigrationsUpsertOne {
	return u.Update(func(s *SeedMigrationsUpsert) {
		s.UpdateMigrated()
	})
}

// Exec executes the query.
func (u *SeedMigrationsUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SeedMigrationsCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SeedMigrationsUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SeedMigrationsUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SeedMigrationsUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SeedMigrationsCreateBulk is the builder for creating many SeedMigrations entities in bulk.
type SeedMigrationsCreateBulk struct {
	config
	builders []*SeedMigrationsCreate
	conflict []sql.ConflictOption
}

// Save creates the SeedMigrations entities in the database.
func (smcb *SeedMigrationsCreateBulk) Save(ctx context.Context) ([]*SeedMigrations, error) {
	specs := make([]*sqlgraph.CreateSpec, len(smcb.builders))
	nodes := make([]*SeedMigrations, len(smcb.builders))
	mutators := make([]Mutator, len(smcb.builders))
	for i := range smcb.builders {
		func(i int, root context.Context) {
			builder := smcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SeedMigrationsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, smcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = smcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, smcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, smcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (smcb *SeedMigrationsCreateBulk) SaveX(ctx context.Context) []*SeedMigrations {
	v, err := smcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (smcb *SeedMigrationsCreateBulk) Exec(ctx context.Context) error {
	_, err := smcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smcb *SeedMigrationsCreateBulk) ExecX(ctx context.Context) {
	if err := smcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SeedMigrations.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SeedMigrationsUpsert) {
//			SetMigrated(v+v).
//		}).
//		Exec(ctx)
func (smcb *SeedMigrationsCreateBulk) OnConflict(opts ...sql.ConflictOption) *SeedMigrationsUpsertBulk {
	smcb.conflict = opts
	return &SeedMigrationsUpsertBulk{
		create: smcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SeedMigrations.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (smcb *SeedMigrationsCreateBulk) OnConflictColumns(columns ...string) *SeedMigrationsUpsertBulk {
	smcb.conflict = append(smcb.conflict, sql.ConflictColumns(columns...))
	return &SeedMigrationsUpsertBulk{
		create: smcb,
	}
}

// SeedMigrationsUpsertBulk is the builder for "upsert"-ing
// a bulk of SeedMigrations nodes.
type SeedMigrationsUpsertBulk struct {
	create *SeedMigrationsCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SeedMigrations.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SeedMigrationsUpsertBulk) UpdateNewValues() *SeedMigrationsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SeedMigrations.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SeedMigrationsUpsertBulk) Ignore() *SeedMigrationsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SeedMigrationsUpsertBulk) DoNothing() *SeedMigrationsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SeedMigrationsCreateBulk.OnConflict
// documentation for more info.
func (u *SeedMigrationsUpsertBulk) Update(set func(*SeedMigrationsUpsert)) *SeedMigrationsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SeedMigrationsUpsert{UpdateSet: update})
	}))
	return u
}

// SetMigrated sets the "migrated" field.
func (u *SeedMigrationsUpsertBulk) SetMigrated(v int) *SeedMigrationsUpsertBulk {
	return u.Update(func(s *SeedMigrationsUpsert) {
		s.SetMigrated(v)
	})
}

// AddMigrated adds v to the "migrated" field.
func (u *SeedMigrationsUpsertBulk) AddMigrated(v int) *SeedMigrationsUpsertBulk {
	return u.Update(func(s *SeedMigrationsUpsert) {
		s.AddMigrated(v)
	})
}

// UpdateMigrated sets the "migrated" field to the value that was provided on create.
func (u *SeedMigrationsUpsertBulk) UpdateMigrated() *SeedMigrationsUpsertBulk {
	return u.Update(func(s *SeedMigrationsUpsert) {
		s.UpdateMigrated()
	})
}

// Exec executes the query.
func (u *SeedMigrationsUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SeedMigrationsCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SeedMigrationsCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SeedMigrationsUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
