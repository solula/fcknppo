// Code generated by ent, DO NOT EDIT.

package file

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the file type in the database.
	Label = "file"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "uuid"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldFilename holds the string denoting the filename field in the database.
	FieldFilename = "filename"
	// FieldMimeType holds the string denoting the mime_type field in the database.
	FieldMimeType = "mime_type"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldCreatorUUID holds the string denoting the creator_uuid field in the database.
	FieldCreatorUUID = "creator_uuid"
	// FieldObjectType holds the string denoting the object_type field in the database.
	FieldObjectType = "object_type"
	// FieldObjectRef holds the string denoting the object_ref field in the database.
	FieldObjectRef = "object_ref"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldTemp holds the string denoting the temp field in the database.
	FieldTemp = "temp"
	// FieldSequenceNumber holds the string denoting the sequence_number field in the database.
	FieldSequenceNumber = "sequence_number"
	// EdgeCreator holds the string denoting the creator edge name in mutations.
	EdgeCreator = "creator"
	// Table holds the table name of the file in the database.
	Table = "files"
	// CreatorTable is the table that holds the creator relation/edge.
	CreatorTable = "files"
	// CreatorInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	CreatorInverseTable = "auth_users"
	// CreatorColumn is the table column denoting the creator relation/edge.
	CreatorColumn = "creator_uuid"
)

// Columns holds all SQL columns for file fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldFilename,
	FieldMimeType,
	FieldDescription,
	FieldCreatorUUID,
	FieldObjectType,
	FieldObjectRef,
	FieldType,
	FieldTemp,
	FieldSequenceNumber,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "waterfall-backend/internal/modules/stores/db/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// Order defines the ordering method for the File queries.
type Order func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByFilename orders the results by the filename field.
func ByFilename(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldFilename, opts...).ToFunc()
}

// ByMimeType orders the results by the mime_type field.
func ByMimeType(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldMimeType, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByCreatorUUID orders the results by the creator_uuid field.
func ByCreatorUUID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldCreatorUUID, opts...).ToFunc()
}

// ByObjectType orders the results by the object_type field.
func ByObjectType(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldObjectType, opts...).ToFunc()
}

// ByObjectRef orders the results by the object_ref field.
func ByObjectRef(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldObjectRef, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByTemp orders the results by the temp field.
func ByTemp(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldTemp, opts...).ToFunc()
}

// BySequenceNumber orders the results by the sequence_number field.
func BySequenceNumber(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldSequenceNumber, opts...).ToFunc()
}

// ByCreatorField orders the results by creator field.
func ByCreatorField(field string, opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreatorStep(), sql.OrderByField(field, opts...))
	}
}
func newCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CreatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CreatorTable, CreatorColumn),
	)
}
